/* -*- Mode: csharp; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
//{
    public RC.PackageSpec Spec {
        get { return new RC.PackageSpec (Handle); }
    }

    internal static PackageDep[] FromSListPtr (IntPtr ptr) {
        if (ptr == IntPtr.Zero)
            return new PackageDep[0];

        GLib.SList slist = new GLib.SList (ptr, typeof (PackageDep));
        PackageDep[] ret = new PackageDep[slist.Count];

        int i = 0;
        foreach (PackageDep d in slist) {
            d.Ref (d.Handle);
            ret[i++] = d;
        }

        PackageDep.SlistFree (slist);

        return ret;
    }

    internal static GLib.SList ToSList (PackageDep[] deps) {
        GLib.SList ret = new GLib.SList (typeof (PackageDep));
        foreach (PackageDep d in deps)
            ret.Append (d.Handle);

        return ret;
    }

    public void ToXml (System.Xml.XmlTextWriter writer)
    {
        // FIXME: if (this.IsOr) rc_package_dep_or_slist_to_xml_node ()

        writer.WriteStartElement ("dep");

		using (RC.PackageSpec spec = Spec) {
			writer.WriteAttributeString ("name", spec.Name);

			if (this.Relation != PackageRelation.Any) {
				writer.WriteAttributeString ("op", Package.RelationToString (this.Relation, 0));

				if (spec.HasEpoch)
					writer.WriteAttributeString ("epoch", System.Xml.XmlConvert.ToString (spec.Epoch));

				if (spec.Version != null)
					writer.WriteAttributeString ("version", spec.Version);

				if (spec.Release != null)
					writer.WriteAttributeString ("release", spec.Release);
			}
		}

        writer.WriteEndElement ();
    }

    private void ParseXmlNode (System.Xml.XmlTextReader reader)
    {
        string name = null;
        string version = null;
        string release = null;
        bool has_epoch = false;
        uint epoch = 0;
        RC.PackageRelation relation = PackageRelation.Any;
        RC.Channel channel = Channel.ANY;

        name = reader["name"];

        string tmp = reader["op"];
        if (tmp != null) {
            relation = Package.RelationFromString (tmp);
            version = reader["version"];
            release = reader["release"];

            tmp = reader["epoch"];
            if (tmp != null) {
                has_epoch = true;
                epoch = System.Xml.XmlConvert.ToUInt32 (tmp);
            }
        }

        IntPtr name_as_native = GLib.Marshaller.StringToPtrGStrdup (name);
        IntPtr version_as_native = GLib.Marshaller.StringToPtrGStrdup (version);
        IntPtr release_as_native = GLib.Marshaller.StringToPtrGStrdup (release);
        Raw = rc_package_dep_new (name_as_native, has_epoch, epoch,
                                  version_as_native, release_as_native,
                                  (int) relation, channel.Handle, false, false);
        GLib.Marshaller.Free (name_as_native);
        GLib.Marshaller.Free (version_as_native);
        GLib.Marshaller.Free (release_as_native);
    }

    public PackageDep (System.Xml.XmlTextReader reader) {
        if (reader.LocalName == "dep") {
            ParseXmlNode (reader);
            // FIXME
            // } else if (node.Name == "or") {
        } else
            throw new ArgumentException ("Invalid XML node");
    }

