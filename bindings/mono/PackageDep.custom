/* -*- Mode: csharp; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */

//namespace {
    public void ToXml (System.Xml.XmlTextWriter writer)
    {
        // FIXME: if (this.IsOr) rc_package_dep_or_slist_to_xml_node ()

        writer.WriteStartElement ("dep");

        writer.WriteAttributeString ("name", this.Spec.Name);

        if (this.Relation != PackageRelation.Any) {
            writer.WriteAttributeString ("op", Package.RelationToString (this.Relation, 0));

            if (this.Spec.HasEpoch)
                writer.WriteAttributeString ("epoch", System.Xml.XmlConvert.ToString (this.Spec.Epoch));

            if (this.Spec.Version != null)
                writer.WriteAttributeString ("version", this.Spec.Version);

            if (this.Spec.Release != null)
                writer.WriteAttributeString ("release", this.Spec.Release);
        }

        writer.WriteEndElement ();
    }

    private void ParseXmlNode (System.Xml.XmlTextReader reader)
    {
        string name = null;
        string version = null;
        string release = null;
        bool has_epoch = false;
        uint epoch = 0;
        RC.PackageRelation relation = PackageRelation.Any;
        RC.Channel channel = Channel.ANY;

        name = reader["name"];

        string tmp = reader["op"];
        if (tmp != null) {
            relation = Package.RelationFromString (tmp);
            version = reader["version"];
            release = reader["release"];

            tmp = reader["epoch"];
            if (tmp != null) {
                has_epoch = true;
                epoch = System.Xml.XmlConvert.ToUInt32 (tmp);
            }
        }

        Raw = rc_package_dep_new (name, has_epoch, epoch, version, release,
                                  (int) relation, channel.Handle, false, false);
    }

    public PackageDep (System.Xml.XmlTextReader reader) {
        if (reader.LocalName == "dep") {
            ParseXmlNode (reader);
            // FIXME
            // } else if (node.Name == "or") {
        } else
            throw new ArgumentException ("Invalid XML node");
    }

