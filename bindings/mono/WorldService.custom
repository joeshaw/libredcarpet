    private static Hashtable services = new Hashtable();

    [DllImport("libredcarpet")]
    static extern unsafe IntPtr rc_world_service_mount(string url, out IntPtr error);

    private static RC.World MountUnmanaged(string url) {
        IntPtr error = IntPtr.Zero;
        IntPtr raw_ret = rc_world_service_mount(url, out error);
        RC.World ret;
        if (raw_ret == IntPtr.Zero)
            ret = null;
        else
            ret = (RC.World) GLib.Object.GetObject(raw_ret, true);
        if (error != IntPtr.Zero)
            throw new GLib.GException (error);

        return ret;
    }

    private static RC.World MountManaged(string url) {
        Uri uri = new Uri(url);

        Type type = (Type)services[uri.Scheme];

        Type[] argTypes = new Type[1];
        argTypes[0] = typeof(string);
                        
        System.Reflection.ConstructorInfo info = type.GetConstructor(argTypes);

        object[] args = new object[1];
        args[0] = url;
                        
        RC.World world = (RC.World)info.Invoke(args);
        ((RC.WorldService)world).Assemble ();

        return world;
    }
                
    public static unsafe RC.World Mount(string url) {
        RC.World world;
                        
        try {
            world = MountUnmanaged(url);
        } catch (GLib.GException e) {
            try {
                world = MountManaged(url);
            } catch (Exception e2) {
                throw e;
            }
        }

        return world;
    }

    protected virtual void Assemble () {}

    [DllImport("libredcarpet")]
    static extern void rc_world_service_register(string scheme, IntPtr world_type);

    public static void Register(string scheme, GLib.GType world_type) {
        rc_world_service_register(scheme, world_type.Val);
    }

    // Support managed services
    public static void Register(string scheme, Type type) {
        services[scheme] = type;
    }
