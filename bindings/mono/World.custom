/* -*- Mode: csharp; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// namespace {

    [DllImport("libredcarpet")]
    static extern IntPtr rc_get_world();

    [DllImport("libredcarpet")]
    static extern void rc_set_world(IntPtr world);

    public static RC.World Global { 
        get {
            IntPtr raw_ret = rc_get_world();
            RC.World ret;
            if (raw_ret == IntPtr.Zero)
                ret = null;
            else
                ret = (RC.World) GLib.Object.GetObject(raw_ret);
            return ret;
        }
        set {
            rc_set_world((value == null) ? IntPtr.Zero : value.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern void rc_world_set_refresh_function(IntPtr raw, RCSharp.WorldRefreshDelegateNative refresh_fn);

    public RC.WorldRefreshDelegate RefreshDelegate { 
        set {
            RCSharp.WorldRefreshDelegateWrapper value_wrapper = null;
            value_wrapper = new RCSharp.WorldRefreshDelegateWrapper (value, this);
            rc_world_set_refresh_function(Handle, value_wrapper.NativeDelegate);
        }
    }

    private class ToXmlHelper
    {
        private System.Xml.XmlTextWriter writer;
        private World world;

        public ToXmlHelper (World world, System.Xml.XmlTextWriter writer)
        {
            this.writer = writer;
        }

        public bool ForeachPackage (Package package)
        {
            package.ToXml (this.writer);

            return true;
        }

        public bool ForeachChannel (Channel channel)
        {
            /* These are handled by the "system_packages" section */
            if (channel.IsSystem)
                return true;

            channel.ToXml (this.writer);
            return true;
        }

        public bool ForeachLock (PackageMatch match)
        {
            match.ToXml (this.writer);
            return true;
        }
    }

    public void ToXml (System.Xml.XmlTextWriter writer)
    {
        ToXmlHelper helper = new ToXmlHelper (this, writer);

        writer.WriteStartElement ("system_packages");
        this.ForeachPackage (Channel.SYSTEM, new PackageDelegate (helper.ForeachPackage));
        writer.WriteEndElement ();

        this.ForeachChannel (new ChannelDelegate (helper.ForeachChannel));
    }

    public void ToXml (System.IO.Stream stream)
    {
        System.Xml.XmlTextWriter writer = new System.Xml.XmlTextWriter (stream, null);
        writer.WriteStartDocument ();
        writer.WriteStartElement ("world");

        writer.WriteStartElement ("locks");
        ToXmlHelper helper = new ToXmlHelper (this, writer);
        this.ForeachLock (new PackageMatchDelegate (helper.ForeachLock));
        writer.WriteEndElement ();

        this.ToXml (writer);

        writer.WriteEndElement ();
        writer.WriteEndDocument ();
        writer.Flush ();
    }
