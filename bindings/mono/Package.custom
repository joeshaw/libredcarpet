
    public RC.PackageSpec Spec {
        get { return new RC.PackageSpec (Handle); }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_updates(IntPtr raw);

    public RC.PackageUpdate[] Updates {
        get {
            IntPtr raw_ret = rc_package_get_updates(Handle);
            RC.PackageUpdate[] ret;
            if (raw_ret != IntPtr.Zero) {
                GLib.SList slist = new GLib.SList(raw_ret, typeof (RC.PackageUpdate));
                ret = new RC.PackageUpdate[slist.Count];
                int i = 0;
                foreach (RC.PackageUpdate u in slist)
                    ret[i++] = u;
            } else
                ret = new RC.PackageUpdate[0];

            return ret;
        }
    }

    // ICloneable
    public Object Clone () {
        IntPtr raw_ret = rc_package_copy(Handle);
        RC.Package ret = raw_ret == IntPtr.Zero ? null : (RC.Package) GLib.Opaque.GetOpaque (raw_ret, typeof (RC.Package), false);
        return ret;
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_children(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_children(IntPtr raw, IntPtr value);

    public PackageDep[] Children { 
        get {
            IntPtr raw_ret = rc_package_get_children(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_children(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_conflicts(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_conflicts(IntPtr raw, IntPtr value);

    public PackageDep[] Conflicts { 
        get {
            IntPtr raw_ret = rc_package_get_conflicts(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_conflicts(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_obsoletes(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_obsoletes(IntPtr raw, IntPtr value);

    public PackageDep[] Obsoletes { 
        get {
            IntPtr raw_ret = rc_package_get_obsoletes(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_obsoletes(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_provides(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_provides(IntPtr raw, IntPtr value);

    public PackageDep[] Provides { 
        get {
            IntPtr raw_ret = rc_package_get_provides(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_provides(Handle, slist.Handle);
        }
    }
    
    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_recommends(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_recommends(IntPtr raw, IntPtr value);

    public PackageDep[] Recommends { 
        get {
            IntPtr raw_ret = rc_package_get_recommends(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_recommends(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_requires(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_requires(IntPtr raw, IntPtr value);

    public PackageDep[] Requires { 
        get {
            IntPtr raw_ret = rc_package_get_requires (Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_requires(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_suggests(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_suggests(IntPtr raw, IntPtr value);

    public PackageDep[] Suggests { 
        get {
            IntPtr raw_ret = rc_package_get_suggests(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_suggests(Handle, slist.Handle);
        }
    }

    public void ToXml (System.Xml.XmlTextWriter writer)
    {
        writer.WriteStartElement ("package");

        writer.WriteElementString ("name", this.Name);

		using (RC.PackageSpec spec = Spec) {
			if (spec.HasEpoch)
				writer.WriteElementString ("epoch", System.Xml.XmlConvert.ToString (spec.Epoch));

			writer.WriteElementString ("version", spec.Version);
			writer.WriteElementString ("release", spec.Release);
			writer.WriteElementString ("arch", RC.Global.ArchToString (spec.Arch));
		}

        writer.WriteElementString ("summary", this.Summary);
        writer.WriteElementString ("description", this.Description);
        writer.WriteElementString ("section", Package.SectionToString (this.Section));
        writer.WriteElementString ("filesize", System.Xml.XmlConvert.ToString (this.FileSize));
        writer.WriteElementString ("installedsize", System.Xml.XmlConvert.ToString (this.InstalledSize));

        if (this.InstallOnly)
            writer.WriteElementString ("install_only", "1");

        if (this.IsPackageSet)
            writer.WriteElementString ("package_set", "1");

        if (this.Updates != null) {
            writer.WriteStartElement ("history");
            foreach (PackageUpdate update in this.Updates)
                update.ToXml (writer);
            writer.WriteEndElement ();
        }

        writer.WriteStartElement ("deps");

        PackageDep[] deps;

        deps = this.Requires;
        if (deps.Length > 0) {
            writer.WriteStartElement ("requires");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Recommends;
        if (deps.Length > 0) {
            writer.WriteStartElement ("recommends");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Suggests;
        if (deps.Length > 0) {
            writer.WriteStartElement ("suggests");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Conflicts;
        if (deps.Length > 0) {
            writer.WriteStartElement ("conflicts");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Obsoletes;
        if (deps.Length > 0) {
            writer.WriteStartElement ("obsoletes");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Children;
        if (deps.Length > 0) {
            writer.WriteStartElement ("children");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Provides;
        if (deps.Length > 0) {
            writer.WriteStartElement ("provides");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        writer.WriteEndElement (); // "deps"
        writer.WriteEndElement (); // "package"
    }
