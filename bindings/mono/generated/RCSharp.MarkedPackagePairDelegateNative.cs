// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void MarkedPackagePairDelegateNative(IntPtr pkg1, int status1, IntPtr pkg2, int status2, IntPtr data);

	internal class MarkedPackagePairDelegateWrapper {

		public void NativeCallback (IntPtr pkg1, int status1, IntPtr pkg2, int status2, IntPtr data)
		{
			RC.Package _arg0 = pkg1 == IntPtr.Zero ? null : (RC.Package) GLib.Opaque.GetOpaque (pkg1, typeof (RC.Package), false);
			RC.PackageStatus _arg1 = (RC.PackageStatus) status1;
			RC.Package _arg2 = pkg2 == IntPtr.Zero ? null : (RC.Package) GLib.Opaque.GetOpaque (pkg2, typeof (RC.Package), false);
			RC.PackageStatus _arg3 = (RC.PackageStatus) status2;
			managed ( _arg0,  _arg1,  _arg2,  _arg3);
		}

		internal MarkedPackagePairDelegateNative NativeDelegate;
		RC.MarkedPackagePairDelegate managed;

		public MarkedPackagePairDelegateWrapper (RC.MarkedPackagePairDelegate managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new MarkedPackagePairDelegateNative (NativeCallback);
		}

		public static RC.MarkedPackagePairDelegate GetManagedDelegate (MarkedPackagePairDelegateNative native)
		{
			if (native == null)
				return null;
			MarkedPackagePairDelegateWrapper wrapper = (MarkedPackagePairDelegateWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
