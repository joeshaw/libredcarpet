// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class PackageDep : RC.PackageSpec {

		[DllImport("libredcarpet")]
		static extern bool rc_package_dep_is_or(IntPtr raw);

		public bool IsOr { 
			get {
				bool raw_ret = rc_package_dep_is_or(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_slist_copy(IntPtr list);

		public static GLib.SList SlistCopy(GLib.SList list) {
			IntPtr raw_ret = rc_package_dep_slist_copy(list.Handle);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_ref(IntPtr raw);

		public RC.PackageDep Ref() {
			IntPtr raw_ret = rc_package_dep_ref(Handle);
			RC.PackageDep ret;
			if (raw_ret == IntPtr.Zero)
				ret = null;
			else
				ret = new RC.PackageDep(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_package_dep_get_relation(IntPtr raw);

		public RC.PackageRelation Relation { 
			get {
				int raw_ret = rc_package_dep_get_relation(Handle);
				RC.PackageRelation ret = (RC.PackageRelation)raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_package_dep_spew_cache();

		public static void SpewCache() {
			rc_package_dep_spew_cache();
		}

		[DllImport("libredcarpet")]
		static extern void rc_package_dep_unref(IntPtr raw);

		public void Unref() {
			rc_package_dep_unref(Handle);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_package_dep_is_pre(IntPtr raw);

		public bool IsPre { 
			get {
				bool raw_ret = rc_package_dep_is_pre(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_package_dep_slist_free(IntPtr list);

		public static void SlistFree(GLib.SList list) {
			rc_package_dep_slist_free(list.Handle);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_package_dep_verify_relation(IntPtr packman, IntPtr dep, IntPtr prov);

		public static bool VerifyRelation(RC.Packman packman, RC.PackageDep dep, RC.PackageDep prov) {
			bool raw_ret = rc_package_dep_verify_relation(packman.Handle, dep.Handle, prov.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_get_channel(IntPtr raw);

		public RC.Channel Channel { 
			get {
				IntPtr raw_ret = rc_package_dep_get_channel(Handle);
				RC.Channel ret;
				if (raw_ret == IntPtr.Zero)
					ret = null;
				else
					ret = new RC.Channel(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = rc_package_dep_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		public PackageDep(IntPtr raw) : base(raw) {}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_new(string name, bool has_epoch, uint epoch, string version, string release, int relation, IntPtr channel, bool pre, bool is_or);

		public PackageDep (string name, bool has_epoch, uint epoch, string version, string release, RC.PackageRelation relation, RC.Channel channel, bool pre, bool is_or) 
		{
			Raw = rc_package_dep_new(name, has_epoch, epoch, version, release, (int) relation, channel.Handle, pre, is_or);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_new_from_spec(IntPtr spec, int relation, IntPtr channel, bool pre, bool is_or);

		public PackageDep (RC.PackageSpec spec, RC.PackageRelation relation, RC.Channel channel, bool pre, bool is_or) 
		{
			Raw = rc_package_dep_new_from_spec(spec.Handle, (int) relation, channel.Handle, pre, is_or);
		}

#endregion
#region Customized extensions
#line 1 "PackageDep.custom"
/* -*- Mode: csharp; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */

//namespace {
    internal static PackageDep[] FromSListPtr (IntPtr ptr) {
        if (ptr == IntPtr.Zero)
            return new PackageDep[0];

        GLib.SList slist = new GLib.SList (ptr, typeof (PackageDep));
        PackageDep[] ret = new PackageDep[slist.Count];

        int i = 0;
        foreach (PackageDep d in slist)
            ret[i++] = d.Ref ();

        PackageDep.SlistFree (slist);

        return ret;
    }

    internal static GLib.SList ToSList (PackageDep[] deps) {
        GLib.SList ret = new GLib.SList (typeof (PackageDep));
        foreach (PackageDep d in deps)
            ret.Append (d.Handle);

        return ret;
    }

    public void ToXml (System.Xml.XmlTextWriter writer)
    {
        // FIXME: if (this.IsOr) rc_package_dep_or_slist_to_xml_node ()

        writer.WriteStartElement ("dep");

        writer.WriteAttributeString ("name", this.Name);

        if (this.Relation != PackageRelation.Any) {
            writer.WriteAttributeString ("op", Package.RelationToString (this.Relation, 0));

            if (this.HasEpoch)
                writer.WriteAttributeString ("epoch", System.Xml.XmlConvert.ToString (this.Epoch));

            if (this.Version != null)
                writer.WriteAttributeString ("version", this.Version);

            if (this.Release != null)
                writer.WriteAttributeString ("release", this.Release);
        }

        writer.WriteEndElement ();
    }

    private void ParseXmlNode (System.Xml.XmlTextReader reader)
    {
        string name = null;
        string version = null;
        string release = null;
        bool has_epoch = false;
        uint epoch = 0;
        RC.PackageRelation relation = PackageRelation.Any;
        RC.Channel channel = Channel.ANY;

        name = reader["name"];

        string tmp = reader["op"];
        if (tmp != null) {
            relation = Package.RelationFromString (tmp);
            version = reader["version"];
            release = reader["release"];

            tmp = reader["epoch"];
            if (tmp != null) {
                has_epoch = true;
                epoch = System.Xml.XmlConvert.ToUInt32 (tmp);
            }
        }

        Raw = rc_package_dep_new (name, has_epoch, epoch, version, release,
                                  (int) relation, channel.Handle, false, false);
    }

    public PackageDep (System.Xml.XmlTextReader reader) {
        if (reader.LocalName == "dep") {
            ParseXmlNode (reader);
            // FIXME
            // } else if (node.Name == "or") {
        } else
            throw new ArgumentException ("Invalid XML node");
    }


#endregion
	}
}
