// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate bool PackageAndDepDelegateNative(IntPtr pkg, IntPtr dep, IntPtr data);

	internal class PackageAndDepDelegateWrapper {

		public bool NativeCallback (IntPtr pkg, IntPtr dep, IntPtr data)
		{
			RC.Package _arg0 = pkg == IntPtr.Zero ? null : (RC.Package) GLib.Opaque.GetOpaque (pkg, typeof (RC.Package), false);
			RC.PackageDep _arg1 = dep == IntPtr.Zero ? null : (RC.PackageDep) GLib.Opaque.GetOpaque (dep, typeof (RC.PackageDep), false);
			return (bool) managed ( _arg0,  _arg1);
		}

		internal PackageAndDepDelegateNative NativeDelegate;
		RC.PackageAndDepDelegate managed;

		public PackageAndDepDelegateWrapper (RC.PackageAndDepDelegate managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new PackageAndDepDelegateNative (NativeCallback);
		}

		public static RC.PackageAndDepDelegate GetManagedDelegate (PackageAndDepDelegateNative native)
		{
			if (native == null)
				return null;
			PackageAndDepDelegateWrapper wrapper = (PackageAndDepDelegateWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
