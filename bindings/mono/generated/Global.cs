// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Global {

		[DllImport("libredcarpet")]
		static extern bool rc_url_is_absolute(string url);

		public static bool UrlIsAbsolute(string url) {
			bool raw_ret = rc_url_is_absolute(url);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_arch_get_compat_list(int arch);

		public static GLib.SList ArchGetCompatList(RC.Arch arch) {
			IntPtr raw_ret = rc_arch_get_compat_list((int) arch);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_arch_get_system_arch();

		public static RC.Arch ArchGetSystemArch() {
			int raw_ret = rc_arch_get_system_arch();
			RC.Arch ret = (RC.Arch) raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_arch_from_string(string arch_name);

		public static RC.Arch ArchFromString(string arch_name) {
			int raw_ret = rc_arch_from_string(arch_name);
			RC.Arch ret = (RC.Arch) raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_arch_get_compat_score(IntPtr compat_arch_list, int arch);

		public static int ArchGetCompatScore(GLib.SList compat_arch_list, RC.Arch arch) {
			int raw_ret = rc_arch_get_compat_score(compat_arch_list.Handle, (int) arch);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_string_to_package_importance(string importance);

		public static RC.PackageImportance PackageImportanceFromString(string importance) {
			int raw_ret = rc_string_to_package_importance(importance);
			RC.PackageImportance ret = (RC.PackageImportance) raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_maybe_merge_paths(string parent_path, string child_path);

		public static string MaybeMergePaths(string parent_path, string child_path) {
			IntPtr raw_ret = rc_maybe_merge_paths(parent_path, child_path);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_importance_to_string(int importance);

		public static string ImportanceToString(RC.PackageImportance importance) {
			IntPtr raw_ret = rc_package_importance_to_string((int) importance);
			string ret = Marshal.PtrToStringAnsi(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_string_to_package_section(string section);

		public static RC.PackageSection StringToPackageSection(string section) {
			int raw_ret = rc_string_to_package_section(section);
			RC.PackageSection ret = (RC.PackageSection) raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_dep_string_to_or_dep_slist(string munged);

		public static GLib.SList DepStringToOrDepSlist(string munged) {
			IntPtr raw_ret = rc_dep_string_to_or_dep_slist(munged);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_arch_to_string(int arch);

		public static string ArchToString(RC.Arch arch) {
			IntPtr raw_ret = rc_arch_to_string((int) arch);
			string ret = Marshal.PtrToStringAnsi(raw_ret);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Global.custom"
public static void Init ()
{
    GtkSharp.LibredcarpetSharp.ObjectManager.Initialize ();
}

#endregion
	}
}
