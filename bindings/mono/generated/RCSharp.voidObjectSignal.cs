// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;
	using System.Runtime.InteropServices;

	internal delegate void voidObjectDelegate(IntPtr arg0, int key);

	internal class voidObjectSignal : GLib.SignalCallback {

		private static voidObjectDelegate _Delegate;

		private static void voidObjectCallback(IntPtr arg0, int key)
		{
			if (!_Instances.Contains(key))
				throw new Exception("Unexpected signal key " + key);

			voidObjectSignal inst = (voidObjectSignal) _Instances[key];
			EventHandler h = (EventHandler) inst._handler;
			h (inst._obj, new EventArgs ());
		}

		public voidObjectSignal(GLib.Object obj, string name, Delegate eh, Type argstype, int connect_flags) : base(obj, eh, argstype)
		{
			if (_Delegate == null) {
				_Delegate = new voidObjectDelegate(voidObjectCallback);
			}
			Connect (name, _Delegate, connect_flags);
		}

		protected override void Dispose (bool disposing)
		{
			_Instances.Remove(_key);
			if(_Instances.Count == 0)
				_Delegate = null;

			Disconnect ();
			base.Dispose (disposing);
		}
	}
}
