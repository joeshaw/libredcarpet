// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void WorldSetSubscribedDelegateNative(IntPtr world, IntPtr channel, bool subs_status);

	internal class WorldSetSubscribedDelegateWrapper {

		public void NativeCallback (IntPtr world, IntPtr channel, bool subs_status)
		{
			RC.World _arg0 = GLib.Object.GetObject(world) as RC.World;
			RC.Channel _arg1 = channel == IntPtr.Zero ? null : (RC.Channel) GLib.Opaque.GetOpaque (channel, typeof (RC.Channel), false);
			bool _arg2 = subs_status;
			managed ( _arg0,  _arg1,  _arg2);
		}

		internal WorldSetSubscribedDelegateNative NativeDelegate;
		RC.WorldSetSubscribedDelegate managed;

		public WorldSetSubscribedDelegateWrapper (RC.WorldSetSubscribedDelegate managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new WorldSetSubscribedDelegateNative (NativeCallback);
		}

		public static RC.WorldSetSubscribedDelegate GetManagedDelegate (WorldSetSubscribedDelegateNative native)
		{
			if (native == null)
				return null;
			WorldSetSubscribedDelegateWrapper wrapper = (WorldSetSubscribedDelegateWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
