// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate bool WorldCanTransactPackageDelegateNative(IntPtr world, IntPtr package);

	internal class WorldCanTransactPackageDelegateWrapper {

		public bool NativeCallback (IntPtr world, IntPtr package)
		{
			RC.World _arg0 = GLib.Object.GetObject(world) as RC.World;
			RC.Package _arg1 = package == IntPtr.Zero ? null : (RC.Package) GLib.Opaque.GetOpaque (package, typeof (RC.Package), false);
			return (bool) managed ( _arg0,  _arg1);
		}

		internal WorldCanTransactPackageDelegateNative NativeDelegate;
		RC.WorldCanTransactPackageDelegate managed;

		public WorldCanTransactPackageDelegateWrapper (RC.WorldCanTransactPackageDelegate managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new WorldCanTransactPackageDelegateNative (NativeCallback);
		}

		public static RC.WorldCanTransactPackageDelegate GetManagedDelegate (WorldCanTransactPackageDelegateNative native)
		{
			if (native == null)
				return null;
			WorldCanTransactPackageDelegateWrapper wrapper = (WorldCanTransactPackageDelegateWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
