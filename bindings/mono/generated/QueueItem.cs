// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class QueueItem : GLib.Opaque {

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_queueitem_get_world_offset ();

		static uint world_offset = rcsharp_rc_queueitem_get_world_offset ();
		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_get_world(IntPtr raw);

		public RC.World World {
			get  {
				IntPtr raw_ret = rc_queue_item_get_world(Handle);
				RC.World ret = GLib.Object.GetObject(raw_ret) as RC.World;
				return ret;
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + world_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_queueitem_get_priority_offset ();

		static uint priority_offset = rcsharp_rc_queueitem_get_priority_offset ();
		public int Priority {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + priority_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + priority_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_queueitem_get_pending_info_offset ();

		static uint pending_info_offset = rcsharp_rc_queueitem_get_pending_info_offset ();
		public GLib.SList PendingInfo {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + pending_info_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + pending_info_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_queueitem_get_type_offset ();

		static uint type_offset = rcsharp_rc_queueitem_get_type_offset ();
		public RC.QueueItemType Type {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + type_offset);
					return (RC.QueueItemType) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + type_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_queueitem_get_size_offset ();

		static uint size_offset = rcsharp_rc_queueitem_get_size_offset ();
		public ulong Size {
			get {
				unsafe {
					UIntPtr* raw_ptr = (UIntPtr*)(((byte*)Handle) + size_offset);
					return (ulong) (*raw_ptr);
				}
			}
			set {
				unsafe {
					UIntPtr* raw_ptr = (UIntPtr*)(((byte*)Handle) + size_offset);
					*raw_ptr = new UIntPtr (value);
				}
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_group_add_item(IntPtr raw, IntPtr subitem);

		public void GroupAddItem(RC.QueueItem subitem) {
			rc_queue_item_group_add_item(Handle, subitem == null ? IntPtr.Zero : subitem.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_log_info(IntPtr raw, IntPtr arg1);

		public void LogInfo(RC.ResolverContext arg1) {
			rc_queue_item_log_info(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_explicitly_requested(IntPtr raw);

		public void UninstallSetExplicitlyRequested() {
			rc_queue_item_uninstall_set_explicitly_requested(Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_dep(IntPtr raw, IntPtr dep);

		public void UninstallSetDep(RC.PackageDep dep) {
			rc_queue_item_uninstall_set_dep(Handle, dep == null ? IntPtr.Zero : dep.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_due_to_conflict(IntPtr raw);

		public void UninstallSetDueToConflict() {
			rc_queue_item_uninstall_set_due_to_conflict(Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_require_set_remove_only(IntPtr raw);

		public void RequireSetRemoveOnly() {
			rc_queue_item_require_set_remove_only(Handle);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_process(IntPtr raw, IntPtr context, IntPtr arg2);

		public bool Process(RC.ResolverContext context, GLib.SList arg2) {
			bool raw_ret = rc_queue_item_process(Handle, context == null ? IntPtr.Zero : context.Handle, arg2.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_branch_is_empty(IntPtr raw);

		public bool BranchIsEmpty() {
			bool raw_ret = rc_queue_item_branch_is_empty(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_add_dep(IntPtr raw, IntPtr dep);

		public void InstallAddDep(RC.PackageDep dep) {
			rc_queue_item_install_add_dep(Handle, dep == null ? IntPtr.Zero : dep.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_set_channel_priority(IntPtr raw, int arg1);

		public void InstallSetChannelPriority(int arg1) {
			rc_queue_item_install_set_channel_priority(Handle, arg1);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_add_info(IntPtr raw, ref RC.ResolverInfo arg1);

		public void AddInfo(RC.ResolverInfo arg1) {
			rc_queue_item_add_info(Handle, ref arg1);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_unlink(IntPtr raw);

		public void UninstallSetUnlink() {
			rc_queue_item_uninstall_set_unlink(Handle);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_is_redundant(IntPtr raw, IntPtr context);

		public bool IsRedundant(RC.ResolverContext context) {
			bool raw_ret = rc_queue_item_is_redundant(Handle, context == null ? IntPtr.Zero : context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = rc_queue_item_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_upgraded_to(IntPtr raw, IntPtr packageo);

		public void UninstallSetUpgradedTo(RC.Package packageo) {
			rc_queue_item_uninstall_set_upgraded_to(Handle, packageo == null ? IntPtr.Zero : packageo.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_set_explicitly_requested(IntPtr raw);

		public void InstallSetExplicitlyRequested() {
			rc_queue_item_install_set_explicitly_requested(Handle);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_is_satisfied(IntPtr raw, IntPtr context);

		public bool IsSatisfied(RC.ResolverContext context) {
			bool raw_ret = rc_queue_item_is_satisfied(Handle, context == null ? IntPtr.Zero : context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_require_add_package(IntPtr raw, IntPtr package);

		public void RequireAddPackage(RC.Package package) {
			rc_queue_item_require_add_package(Handle, package == null ? IntPtr.Zero : package.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_remove_only(IntPtr raw);

		public void UninstallSetRemoveOnly() {
			rc_queue_item_uninstall_set_remove_only(Handle);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_branch_contains(IntPtr raw, IntPtr possible_subbranch);

		public bool BranchContains(RC.QueueItem possible_subbranch) {
			bool raw_ret = rc_queue_item_branch_contains(Handle, possible_subbranch == null ? IntPtr.Zero : possible_subbranch.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_add_needed_by(IntPtr raw, IntPtr package);

		public void InstallAddNeededBy(RC.Package package) {
			rc_queue_item_install_add_needed_by(Handle, package == null ? IntPtr.Zero : package.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_branch_set_label(IntPtr raw, IntPtr str);

		public void BranchSetLabel(string str) {
			IntPtr str_as_native = GLib.Marshaller.StringToPtrGStrdup (str);
			rc_queue_item_branch_set_label(Handle, str_as_native);
			GLib.Marshaller.Free (str_as_native);
		}

		[DllImport("libredcarpet")]
		static extern int rc_queue_item_cmp(IntPtr raw, IntPtr b);

		public int Cmp(RC.QueueItem b) {
			int raw_ret = rc_queue_item_cmp(Handle, b == null ? IntPtr.Zero : b.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_queue_item_install_get_channel_priority(IntPtr raw);

		public int InstallGetChannelPriority() {
			int raw_ret = rc_queue_item_install_get_channel_priority(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_set_upgrade_package(IntPtr raw, IntPtr upgrades);

		public void InstallSetUpgradePackage(RC.Package upgrades) {
			rc_queue_item_install_set_upgrade_package(Handle, upgrades == null ? IntPtr.Zero : upgrades.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_set_other_penalty(IntPtr raw, int arg1);

		public void InstallSetOtherPenalty(int arg1) {
			rc_queue_item_install_set_other_penalty(Handle, arg1);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_due_to_obsolete(IntPtr raw);

		public void UninstallSetDueToObsolete() {
			rc_queue_item_uninstall_set_due_to_obsolete(Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_branch_add_item(IntPtr raw, IntPtr subitem);

		public void BranchAddItem(RC.QueueItem subitem) {
			rc_queue_item_branch_add_item(Handle, subitem == null ? IntPtr.Zero : subitem.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_copy(IntPtr raw);

		public RC.QueueItem Copy() {
			IntPtr raw_ret = rc_queue_item_copy(Handle);
			RC.QueueItem ret = raw_ret == IntPtr.Zero ? null : (RC.QueueItem) GLib.Opaque.GetOpaque (raw_ret, typeof (RC.QueueItem), true);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_queue_item_install_get_other_penalty(IntPtr raw);

		public int InstallGetOtherPenalty() {
			int raw_ret = rc_queue_item_install_get_other_penalty(Handle);
			int ret = raw_ret;
			return ret;
		}

		public QueueItem(IntPtr raw) : base(raw) {}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_branch(IntPtr arg1);

		public QueueItem (RC.World arg1) 
		{
			Raw = rc_queue_item_new_branch(arg1 == null ? IntPtr.Zero : arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_conflict(IntPtr arg1, IntPtr dep, IntPtr package);

		public QueueItem (RC.World arg1, RC.PackageDep dep, RC.Package package) 
		{
			Raw = rc_queue_item_new_conflict(arg1 == null ? IntPtr.Zero : arg1.Handle, dep == null ? IntPtr.Zero : dep.Handle, package == null ? IntPtr.Zero : package.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_group(IntPtr arg1);

		public static QueueItem NewGroup(RC.World arg1)
		{
			QueueItem result = new QueueItem (rc_queue_item_new_group(arg1 == null ? IntPtr.Zero : arg1.Handle));
			return result;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_install(IntPtr arg1, IntPtr package);

		public QueueItem (RC.World arg1, RC.Package package) 
		{
			Raw = rc_queue_item_new_install(arg1 == null ? IntPtr.Zero : arg1.Handle, package == null ? IntPtr.Zero : package.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_require(IntPtr arg1, IntPtr dep);

		public QueueItem (RC.World arg1, RC.PackageDep dep) 
		{
			Raw = rc_queue_item_new_require(arg1 == null ? IntPtr.Zero : arg1.Handle, dep == null ? IntPtr.Zero : dep.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_uninstall(IntPtr arg1, IntPtr package, IntPtr reason);

		public QueueItem (RC.World arg1, RC.Package package, string reason) 
		{
			IntPtr reason_as_native = GLib.Marshaller.StringToPtrGStrdup (reason);
			Raw = rc_queue_item_new_uninstall(arg1 == null ? IntPtr.Zero : arg1.Handle, package == null ? IntPtr.Zero : package.Handle, reason_as_native);
			GLib.Marshaller.Free (reason_as_native);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			rc_queue_item_free (raw);
		}

#endregion
	}
}
