// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct QueueItem {

		public RC.QueueItemType Type;
		public int Priority;
		public int Size;
		private IntPtr _pending_info;
		private IntPtr _world;

		public RC.World world {
			get { 
				RC.World ret = (RC.World) GLib.Object.GetObject(_world);
				return ret;
			}
			set { _world = value.Handle; }
		}

		public static RC.QueueItem Zero = new RC.QueueItem ();

		public static RC.QueueItem New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return RC.QueueItem.Zero;
			}
			RC.QueueItem self = new RC.QueueItem();
			self = (RC.QueueItem) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_branch(IntPtr arg1);

		public static QueueItem NewBranch(RC.World arg1)
		{
			return QueueItem.New (rc_queue_item_new_branch(arg1.Handle));
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_conflict(IntPtr arg1, IntPtr dep, IntPtr package);

		public static QueueItem NewConflict(RC.World arg1, RC.PackageDep dep, RC.Package package)
		{
			return QueueItem.New (rc_queue_item_new_conflict(arg1.Handle, dep.Handle, package.Handle));
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_group(IntPtr arg1);

		public static QueueItem NewGroup(RC.World arg1)
		{
			return QueueItem.New (rc_queue_item_new_group(arg1.Handle));
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_install(IntPtr arg1, IntPtr package);

		public static QueueItem NewInstall(RC.World arg1, RC.Package package)
		{
			return QueueItem.New (rc_queue_item_new_install(arg1.Handle, package.Handle));
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_require(IntPtr arg1, IntPtr dep);

		public static QueueItem NewRequire(RC.World arg1, RC.PackageDep dep)
		{
			return QueueItem.New (rc_queue_item_new_require(arg1.Handle, dep.Handle));
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_new_uninstall(IntPtr arg1, IntPtr package, string reason);

		public static QueueItem NewUninstall(RC.World arg1, RC.Package package, string reason)
		{
			return QueueItem.New (rc_queue_item_new_uninstall(arg1.Handle, package.Handle, reason));
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_group_add_item(ref RC.QueueItem raw, ref RC.QueueItem subitem);

		public void GroupAddItem(RC.QueueItem subitem) {
			rc_queue_item_group_add_item(ref this, ref subitem);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_log_info(ref RC.QueueItem raw, IntPtr arg1);

		public void LogInfo(RC.ResolverContext arg1) {
			rc_queue_item_log_info(ref this, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_explicitly_requested(ref RC.QueueItem raw);

		public void UninstallSetExplicitlyRequested() {
			rc_queue_item_uninstall_set_explicitly_requested(ref this);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_dep(ref RC.QueueItem raw, IntPtr dep);

		public void UninstallSetDep(RC.PackageDep dep) {
			rc_queue_item_uninstall_set_dep(ref this, dep.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_due_to_conflict(ref RC.QueueItem raw);

		public void UninstallSetDueToConflict() {
			rc_queue_item_uninstall_set_due_to_conflict(ref this);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_get_world(ref RC.QueueItem raw);

		public RC.World World { 
			get {
				IntPtr raw_ret = rc_queue_item_get_world(ref this);
				RC.World ret;
				if (raw_ret == IntPtr.Zero)
					ret = null;
				else
					ret = (RC.World) GLib.Object.GetObject(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_require_set_remove_only(ref RC.QueueItem raw);

		public void RequireSetRemoveOnly() {
			rc_queue_item_require_set_remove_only(ref this);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_process(ref RC.QueueItem raw, IntPtr context, IntPtr arg2);

		public bool Process(RC.ResolverContext context, GLib.SList arg2) {
			bool raw_ret = rc_queue_item_process(ref this, context.Handle, arg2.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_branch_is_empty(ref RC.QueueItem raw);

		public bool BranchIsEmpty() {
			bool raw_ret = rc_queue_item_branch_is_empty(ref this);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_add_dep(ref RC.QueueItem raw, IntPtr dep);

		public void InstallAddDep(RC.PackageDep dep) {
			rc_queue_item_install_add_dep(ref this, dep.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_set_channel_priority(ref RC.QueueItem raw, int arg1);

		public void InstallSetChannelPriority(int arg1) {
			rc_queue_item_install_set_channel_priority(ref this, arg1);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_add_info(ref RC.QueueItem raw, ref RC.ResolverInfo arg1);

		public void AddInfo(RC.ResolverInfo arg1) {
			rc_queue_item_add_info(ref this, ref arg1);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_unlink(ref RC.QueueItem raw);

		public void UninstallSetUnlink() {
			rc_queue_item_uninstall_set_unlink(ref this);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_is_redundant(ref RC.QueueItem raw, IntPtr context);

		public bool IsRedundant(RC.ResolverContext context) {
			bool raw_ret = rc_queue_item_is_redundant(ref this, context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_to_string(ref RC.QueueItem raw);

		public override string ToString() {
			IntPtr raw_ret = rc_queue_item_to_string(ref this);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_upgraded_to(ref RC.QueueItem raw, IntPtr packageo);

		public void UninstallSetUpgradedTo(RC.Package packageo) {
			rc_queue_item_uninstall_set_upgraded_to(ref this, packageo.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_set_explicitly_requested(ref RC.QueueItem raw);

		public void InstallSetExplicitlyRequested() {
			rc_queue_item_install_set_explicitly_requested(ref this);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_is_satisfied(ref RC.QueueItem raw, IntPtr context);

		public bool IsSatisfied(RC.ResolverContext context) {
			bool raw_ret = rc_queue_item_is_satisfied(ref this, context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_free(ref RC.QueueItem raw);

		public void Free() {
			rc_queue_item_free(ref this);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_require_add_package(ref RC.QueueItem raw, IntPtr package);

		public void RequireAddPackage(RC.Package package) {
			rc_queue_item_require_add_package(ref this, package.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_remove_only(ref RC.QueueItem raw);

		public void UninstallSetRemoveOnly() {
			rc_queue_item_uninstall_set_remove_only(ref this);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_queue_item_branch_contains(ref RC.QueueItem raw, ref RC.QueueItem possible_subbranch);

		public bool BranchContains(RC.QueueItem possible_subbranch) {
			bool raw_ret = rc_queue_item_branch_contains(ref this, ref possible_subbranch);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_add_needed_by(ref RC.QueueItem raw, IntPtr package);

		public void InstallAddNeededBy(RC.Package package) {
			rc_queue_item_install_add_needed_by(ref this, package.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_branch_set_label(ref RC.QueueItem raw, string str);

		public void BranchSetLabel(string str) {
			rc_queue_item_branch_set_label(ref this, str);
		}

		[DllImport("libredcarpet")]
		static extern int rc_queue_item_cmp(ref RC.QueueItem raw, ref RC.QueueItem b);

		public int Cmp(RC.QueueItem b) {
			int raw_ret = rc_queue_item_cmp(ref this, ref b);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_queue_item_install_get_channel_priority(ref RC.QueueItem raw);

		public int InstallGetChannelPriority() {
			int raw_ret = rc_queue_item_install_get_channel_priority(ref this);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_set_upgrade_package(ref RC.QueueItem raw, IntPtr upgrades);

		public void InstallSetUpgradePackage(RC.Package upgrades) {
			rc_queue_item_install_set_upgrade_package(ref this, upgrades.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_install_set_other_penalty(ref RC.QueueItem raw, int arg1);

		public void InstallSetOtherPenalty(int arg1) {
			rc_queue_item_install_set_other_penalty(ref this, arg1);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_uninstall_set_due_to_obsolete(ref RC.QueueItem raw);

		public void UninstallSetDueToObsolete() {
			rc_queue_item_uninstall_set_due_to_obsolete(ref this);
		}

		[DllImport("libredcarpet")]
		static extern void rc_queue_item_branch_add_item(ref RC.QueueItem raw, ref RC.QueueItem subitem);

		public void BranchAddItem(RC.QueueItem subitem) {
			rc_queue_item_branch_add_item(ref this, ref subitem);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_queue_item_copy(ref RC.QueueItem raw);

		public RC.QueueItem Copy() {
			IntPtr raw_ret = rc_queue_item_copy(ref this);
			RC.QueueItem ret = RC.QueueItem.New (raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_queue_item_install_get_other_penalty(ref RC.QueueItem raw);

		public int InstallGetOtherPenalty() {
			int raw_ret = rc_queue_item_install_get_other_penalty(ref this);
			int ret = raw_ret;
			return ret;
		}

#endregion
	}
}
