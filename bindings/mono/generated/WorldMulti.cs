// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class WorldMulti : RC.World {

		~WorldMulti()
		{
			Dispose();
		}

		[Obsolete]
		protected WorldMulti(GLib.GType gtype) : base(gtype) {}
		public WorldMulti(IntPtr raw) : base(raw) {}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_multi_new();

		public WorldMulti () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (WorldMulti)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = rc_world_multi_new();
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_multi_get_subworlds(IntPtr raw);

		public GLib.SList Subworlds {
			get  {
				IntPtr raw_ret = rc_world_multi_get_subworlds(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[GLib.CDeclCallback]
		delegate void SubworldRemovedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void SubworldRemovedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			RC.SubworldRemovedArgs args = new RC.SubworldRemovedArgs ();
			args.Args = new object[1];
			args.Args[0] = GLib.Object.GetObject(arg1) as RC.World;
			RC.SubworldRemovedHandler handler = (RC.SubworldRemovedHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void SubworldRemovedVMDelegate (IntPtr multi, IntPtr subworld);

		static SubworldRemovedVMDelegate SubworldRemovedVMCallback;

		static void subworldremoved_cb (IntPtr multi, IntPtr subworld)
		{
			WorldMulti multi_managed = GLib.Object.GetObject (multi, false) as WorldMulti;
			multi_managed.OnSubworldRemoved (GLib.Object.GetObject(subworld) as RC.World);
		}

		private static void OverrideSubworldRemoved (GLib.GType gtype)
		{
			if (SubworldRemovedVMCallback == null)
				SubworldRemovedVMCallback = new SubworldRemovedVMDelegate (subworldremoved_cb);
			OverrideVirtualMethod (gtype, "subworld_removed", SubworldRemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(RC.WorldMulti), ConnectionMethod="OverrideSubworldRemoved")]
		protected virtual void OnSubworldRemoved (RC.World subworld)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (subworld);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("subworld_removed")]
		public event RC.SubworldRemovedHandler SubworldRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "subworld_removed", new SubworldRemovedSignalDelegate(SubworldRemovedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "subworld_removed", new SubworldRemovedSignalDelegate(SubworldRemovedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void SubworldAddedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void SubworldAddedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			RC.SubworldAddedArgs args = new RC.SubworldAddedArgs ();
			args.Args = new object[1];
			args.Args[0] = GLib.Object.GetObject(arg1) as RC.World;
			RC.SubworldAddedHandler handler = (RC.SubworldAddedHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void SubworldAddedVMDelegate (IntPtr multi, IntPtr subworld);

		static SubworldAddedVMDelegate SubworldAddedVMCallback;

		static void subworldadded_cb (IntPtr multi, IntPtr subworld)
		{
			WorldMulti multi_managed = GLib.Object.GetObject (multi, false) as WorldMulti;
			multi_managed.OnSubworldAdded (GLib.Object.GetObject(subworld) as RC.World);
		}

		private static void OverrideSubworldAdded (GLib.GType gtype)
		{
			if (SubworldAddedVMCallback == null)
				SubworldAddedVMCallback = new SubworldAddedVMDelegate (subworldadded_cb);
			OverrideVirtualMethod (gtype, "subworld_added", SubworldAddedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(RC.WorldMulti), ConnectionMethod="OverrideSubworldAdded")]
		protected virtual void OnSubworldAdded (RC.World subworld)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (subworld);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("subworld_added")]
		public event RC.SubworldAddedHandler SubworldAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "subworld_added", new SubworldAddedSignalDelegate(SubworldAddedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "subworld_added", new SubworldAddedSignalDelegate(SubworldAddedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_world_multi_remove_subworld(IntPtr raw, IntPtr arg1);

		public void RemoveSubworld(RC.World arg1) {
			rc_world_multi_remove_subworld(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_multi_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = rc_world_multi_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_world_multi_foreach_subworld_by_type(IntPtr raw, IntPtr type, RCSharp.WorldDelegateNative cb, IntPtr user_data);

		public int ForeachSubworldByType(GLib.GType type, RC.WorldDelegate cb) {
			RCSharp.WorldDelegateWrapper cb_wrapper = new RCSharp.WorldDelegateWrapper (cb);
			int raw_ret = rc_world_multi_foreach_subworld_by_type(Handle, type.Val, cb_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_multi_lookup_service_by_id(IntPtr raw, IntPtr id);

		public RC.WorldService LookupServiceById(string id) {
			IntPtr id_as_native = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr raw_ret = rc_world_multi_lookup_service_by_id(Handle, id_as_native);
			RC.WorldService ret = GLib.Object.GetObject(raw_ret) as RC.WorldService;
			GLib.Marshaller.Free (id_as_native);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_world_multi_foreach_subworld(IntPtr raw, RCSharp.WorldDelegateNative cb, IntPtr user_data);

		public int ForeachSubworld(RC.WorldDelegate cb) {
			RCSharp.WorldDelegateWrapper cb_wrapper = new RCSharp.WorldDelegateWrapper (cb);
			int raw_ret = rc_world_multi_foreach_subworld(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_multi_lookup_service(IntPtr raw, IntPtr url);

		public RC.WorldService LookupService(string url) {
			IntPtr url_as_native = GLib.Marshaller.StringToPtrGStrdup (url);
			IntPtr raw_ret = rc_world_multi_lookup_service(Handle, url_as_native);
			RC.WorldService ret = GLib.Object.GetObject(raw_ret) as RC.WorldService;
			GLib.Marshaller.Free (url_as_native);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_world_multi_add_subworld(IntPtr raw, IntPtr arg1);

		public void AddSubworld(RC.World arg1) {
			rc_world_multi_add_subworld(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
		}


		static WorldMulti ()
		{
			GtkSharp.LibredcarpetSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "WorldMulti.custom"
    // This method is needed to support managed WorldService implementations
    public void MountService (string url) {
        WorldService existing = this.LookupService (url);

        if (existing != null) {
            throw new ServiceMountException ("A service with id " + existing.Id + " is already mounted");
        }

        WorldService world = (WorldService)WorldService.Mount (url);

        if (this.LookupServiceById (world.Id) != null) {
            throw new ServiceMountException ("A service with id " + world.Id + " is already mounted");
        }

        this.AddSubworld (world);
        world.Dispose ();
    }

#endregion
	}
}
