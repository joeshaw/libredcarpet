// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct QueueItem_Conflict {

		public RC.QueueItem Parent;
		private IntPtr _dep;

		public RC.PackageDep dep {
			get { 
				RC.PackageDep ret = new RC.PackageDep(_dep);
				if (ret == null) ret = new RC.PackageDep(_dep);
				return ret;
			}
			set { _dep = value.Handle; }
		}
		private IntPtr _conflicting_package;

		public RC.Package conflicting_package {
			get { 
				RC.Package ret = new RC.Package(_conflicting_package);
				if (ret == null) ret = new RC.Package(_conflicting_package);
				return ret;
			}
			set { _conflicting_package = value.Handle; }
		}
		private uint _bitfield0;

		public static RC.QueueItem_Conflict Zero = new RC.QueueItem_Conflict ();

		public static RC.QueueItem_Conflict New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return RC.QueueItem_Conflict.Zero;
			}
			RC.QueueItem_Conflict self = new RC.QueueItem_Conflict();
			self = (RC.QueueItem_Conflict) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

#endregion
	}
}
