// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ResolverContext : GLib.Opaque {

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_last_checked_status_offset ();

		static uint last_checked_status_offset = rcsharp_rc_resolvercontext_get_last_checked_status_offset ();
		public RC.PackageStatus LastCheckedStatus {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + last_checked_status_offset);
					return (RC.PackageStatus) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + last_checked_status_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_parent_offset ();

		static uint parent_offset = rcsharp_rc_resolvercontext_get_parent_offset ();
		public RC.ResolverContext Parent {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (RC.ResolverContext) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (RC.ResolverContext), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_refs_offset ();

		static uint refs_offset = rcsharp_rc_resolvercontext_get_refs_offset ();
		public int Refs {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + refs_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + refs_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static bool rcsharp_rc_resolvercontext_get_verifying (IntPtr raw);
		[DllImport ("libredcarpetsharpglue-0")]
		extern static void rcsharp_rc_resolvercontext_set_verifying (IntPtr raw, bool value);
		public bool Verifying {
			get {
				return rcsharp_rc_resolvercontext_get_verifying (Handle);
			}
			set {
				rcsharp_rc_resolvercontext_set_verifying (Handle, value);
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_last_checked_package_offset ();

		static uint last_checked_package_offset = rcsharp_rc_resolvercontext_get_last_checked_package_offset ();
		public RC.Package LastCheckedPackage {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + last_checked_package_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (RC.Package) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (RC.Package), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + last_checked_package_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_download_size_offset ();

		static uint download_size_offset = rcsharp_rc_resolvercontext_get_download_size_offset ();
		public uint DownloadSize {
			get {
				unsafe {
					uint* raw_ptr = (uint*)(((byte*)Handle) + download_size_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					uint* raw_ptr = (uint*)(((byte*)Handle) + download_size_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_max_priority_offset ();

		static uint max_priority_offset = rcsharp_rc_resolvercontext_get_max_priority_offset ();
		public int MaxPriority {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + max_priority_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + max_priority_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_install_size_offset ();

		static uint install_size_offset = rcsharp_rc_resolvercontext_get_install_size_offset ();
		public uint InstallSize {
			get {
				unsafe {
					uint* raw_ptr = (uint*)(((byte*)Handle) + install_size_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					uint* raw_ptr = (uint*)(((byte*)Handle) + install_size_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static bool rcsharp_rc_resolvercontext_get_invalid (IntPtr raw);
		[DllImport ("libredcarpetsharpglue-0")]
		extern static void rcsharp_rc_resolvercontext_set_invalid (IntPtr raw, bool value);
		public bool Invalid {
			get {
				return rcsharp_rc_resolvercontext_get_invalid (Handle);
			}
			set {
				rcsharp_rc_resolvercontext_set_invalid (Handle, value);
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_world_offset ();

		static uint world_offset = rcsharp_rc_resolvercontext_get_world_offset ();
		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_world(IntPtr raw);

		public RC.World World {
			get  {
				IntPtr raw_ret = rc_resolver_context_get_world(Handle);
				RC.World ret = GLib.Object.GetObject(raw_ret) as RC.World;
				return ret;
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + world_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_total_priority_offset ();

		static uint total_priority_offset = rcsharp_rc_resolvercontext_get_total_priority_offset ();
		public int TotalPriority {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + total_priority_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + total_priority_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_log_offset ();

		static uint log_offset = rcsharp_rc_resolvercontext_get_log_offset ();
		public GLib.List Log {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + log_offset);
					return new GLib.List((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + log_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_other_penalties_offset ();

		static uint other_penalties_offset = rcsharp_rc_resolvercontext_get_other_penalties_offset ();
		public int OtherPenalties {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + other_penalties_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + other_penalties_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_status_offset ();

		static uint status_offset = rcsharp_rc_resolvercontext_get_status_offset ();
		public System.IntPtr Status {
			get {
				unsafe {
					System.IntPtr* raw_ptr = (System.IntPtr*)(((byte*)Handle) + status_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					System.IntPtr* raw_ptr = (System.IntPtr*)(((byte*)Handle) + status_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_current_channel_offset ();

		static uint current_channel_offset = rcsharp_rc_resolvercontext_get_current_channel_offset ();
		public RC.Channel CurrentChannel {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + current_channel_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (RC.Channel) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (RC.Channel), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + current_channel_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolvercontext_get_min_priority_offset ();

		static uint min_priority_offset = rcsharp_rc_resolvercontext_get_min_priority_offset ();
		public int MinPriority {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + min_priority_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + min_priority_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_package_is_possible(IntPtr raw, IntPtr arg1);

		public bool PackageIsPossible(RC.Package arg1) {
			bool raw_ret = rc_resolver_context_package_is_possible(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_foreach_install(IntPtr raw, RCSharp.MarkedPackageDelegateNative fn, IntPtr user_data);

		public int ForeachInstall(RC.MarkedPackageDelegate fn) {
			RCSharp.MarkedPackageDelegateWrapper fn_wrapper = new RCSharp.MarkedPackageDelegateWrapper (fn);
			int raw_ret = rc_resolver_context_foreach_install(Handle, fn_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_spew_info(IntPtr raw);

		public void SpewInfo() {
			rc_resolver_context_spew_info(Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_requirement_is_possible(IntPtr raw, IntPtr dep);

		public bool RequirementIsPossible(RC.PackageDep dep) {
			bool raw_ret = rc_resolver_context_requirement_is_possible(Handle, dep == null ? IntPtr.Zero : dep.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_uninstalls(IntPtr raw);

		public GLib.SList Uninstalls { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_uninstalls(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_upgrades(IntPtr raw);

		public GLib.SList Upgrades { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_upgrades(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_is_invalid(IntPtr raw);

		public bool IsInvalid { 
			get {
				bool raw_ret = rc_resolver_context_is_invalid(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_foreach_info(IntPtr raw, IntPtr arg1, int priority, RCSharp.ResolverInfoDelegateNative fn, IntPtr user_data);

		public void ForeachInfo(RC.Package arg1, int priority, RC.ResolverInfoDelegate fn) {
			RCSharp.ResolverInfoDelegateWrapper fn_wrapper = new RCSharp.ResolverInfoDelegateWrapper (fn);
			rc_resolver_context_foreach_info(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle, priority, fn_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_upgrade_package(IntPtr raw, IntPtr new_package, IntPtr old_package, bool is_soft, int other_penalty);

		public bool UpgradePackage(RC.Package new_package, RC.Package old_package, bool is_soft, int other_penalty) {
			bool raw_ret = rc_resolver_context_upgrade_package(Handle, new_package == null ? IntPtr.Zero : new_package.Handle, old_package == null ? IntPtr.Zero : old_package.Handle, is_soft, other_penalty);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_install_package(IntPtr raw, IntPtr package, bool is_soft, int other_penalty);

		public bool InstallPackage(RC.Package package, bool is_soft, int other_penalty) {
			bool raw_ret = rc_resolver_context_install_package(Handle, package == null ? IntPtr.Zero : package.Handle, is_soft, other_penalty);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_get_channel_priority(IntPtr raw, IntPtr arg1);

		public int GetChannelPriority(RC.Channel arg1) {
			int raw_ret = rc_resolver_context_get_channel_priority(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_set_status(IntPtr raw, IntPtr arg1, int status);

		public void SetStatus(RC.Package arg1, RC.PackageStatus status) {
			rc_resolver_context_set_status(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle, (int) status);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_package_is_absent(IntPtr raw, IntPtr arg1);

		public bool PackageIsAbsent(RC.Package arg1) {
			bool raw_ret = rc_resolver_context_package_is_absent(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_is_valid(IntPtr raw);

		public bool IsValid { 
			get {
				bool raw_ret = rc_resolver_context_is_valid(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_add_info(IntPtr raw, ref RC.ResolverInfo arg1);

		public void AddInfo(RC.ResolverInfo arg1) {
			rc_resolver_context_add_info(Handle, ref arg1);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_foreach_marked_package(IntPtr raw, RCSharp.MarkedPackageDelegateNative fn, IntPtr user_data);

		public void ForeachMarkedPackage(RC.MarkedPackageDelegate fn) {
			RCSharp.MarkedPackageDelegateWrapper fn_wrapper = new RCSharp.MarkedPackageDelegateWrapper (fn);
			rc_resolver_context_foreach_marked_package(Handle, fn_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_foreach_uninstall(IntPtr raw, RCSharp.MarkedPackageDelegateNative fn, IntPtr user_data);

		public int ForeachUninstall(RC.MarkedPackageDelegate fn) {
			RCSharp.MarkedPackageDelegateWrapper fn_wrapper = new RCSharp.MarkedPackageDelegateWrapper (fn);
			int raw_ret = rc_resolver_context_foreach_uninstall(Handle, fn_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_uninstall_count(IntPtr raw);

		public int UninstallCount() {
			int raw_ret = rc_resolver_context_uninstall_count(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_add_error_str(IntPtr raw, IntPtr arg1, IntPtr str);

		public void AddErrorStr(RC.Package arg1, string str) {
			rc_resolver_context_add_error_str(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle, GLib.Marshaller.StringToPtrGStrdup(str));
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_foreach_upgrade(IntPtr raw, RCSharp.MarkedPackagePairDelegateNative fn, IntPtr user_data);

		public int ForeachUpgrade(RC.MarkedPackagePairDelegate fn) {
			RCSharp.MarkedPackagePairDelegateWrapper fn_wrapper = new RCSharp.MarkedPackagePairDelegateWrapper (fn);
			int raw_ret = rc_resolver_context_foreach_upgrade(Handle, fn_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_package_is_present(IntPtr raw, IntPtr arg1);

		public bool PackageIsPresent(RC.Package arg1) {
			bool raw_ret = rc_resolver_context_package_is_present(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_is_parallel_install(IntPtr raw, IntPtr arg1);

		public bool IsParallelInstall(RC.Package arg1) {
			bool raw_ret = rc_resolver_context_is_parallel_install(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_installs(IntPtr raw);

		public GLib.SList Installs { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_installs(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_spew(IntPtr raw);

		public void Spew() {
			rc_resolver_context_spew(Handle);
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_cmp(IntPtr raw, IntPtr arg1);

		public int Cmp(RC.ResolverContext arg1) {
			int raw_ret = rc_resolver_context_cmp(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_get_status(IntPtr raw, IntPtr arg1);

		public RC.PackageStatus GetStatus(RC.Package arg1) {
			int raw_ret = rc_resolver_context_get_status(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
			RC.PackageStatus ret = (RC.PackageStatus) raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_upgrade_count(IntPtr raw);

		public int UpgradeCount() {
			int raw_ret = rc_resolver_context_upgrade_count(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_requirement_is_met(IntPtr raw, IntPtr dep, bool is_child);

		public bool RequirementIsMet(RC.PackageDep dep, bool is_child) {
			bool raw_ret = rc_resolver_context_requirement_is_met(Handle, dep == null ? IntPtr.Zero : dep.Handle, is_child);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_uninstall_package(IntPtr raw, IntPtr package, bool part_of_upgrade, bool due_to_obsolete, bool due_to_unlink);

		public bool UninstallPackage(RC.Package package, bool part_of_upgrade, bool due_to_obsolete, bool due_to_unlink) {
			bool raw_ret = rc_resolver_context_uninstall_package(Handle, package == null ? IntPtr.Zero : package.Handle, part_of_upgrade, due_to_obsolete, due_to_unlink);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_marked_packages(IntPtr raw);

		public GLib.SList MarkedPackages { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_marked_packages(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_info(IntPtr raw);

		public GLib.SList Info { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_info(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_install_count(IntPtr raw);

		public int InstallCount() {
			int raw_ret = rc_resolver_context_install_count(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_partial_cmp(IntPtr raw, IntPtr arg1);

		public int PartialCmp(RC.ResolverContext arg1) {
			int raw_ret = rc_resolver_context_partial_cmp(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_add_info_str(IntPtr raw, IntPtr arg1, int priority, IntPtr str);

		public void AddInfoStr(RC.Package arg1, int priority, string str) {
			rc_resolver_context_add_info_str(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle, priority, GLib.Marshaller.StringToPtrGStrdup(str));
		}

		public ResolverContext(IntPtr raw) : base(raw) {}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_new();

		public ResolverContext () 
		{
			Raw = rc_resolver_context_new();
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_new_child(IntPtr parent);

		public ResolverContext (RC.ResolverContext parent) 
		{
			Raw = rc_resolver_context_new_child(parent == null ? IntPtr.Zero : parent.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				rc_resolver_context_ref (raw);
				Owned = true;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				rc_resolver_context_unref (raw);
				Owned = false;
			}
		}

#endregion
	}
}
