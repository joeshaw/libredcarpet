// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ResolverContext : GLib.Opaque {

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_package_is_possible(IntPtr raw, IntPtr arg1);

		public bool PackageIsPossible(RC.Package arg1) {
			bool raw_ret = rc_resolver_context_package_is_possible(Handle, arg1.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_foreach_install(IntPtr raw, RCSharp.MarkedPackageDelegateNative fn, IntPtr user_data);

		public int ForeachInstall(RC.MarkedPackageDelegate fn) {
			RCSharp.MarkedPackageDelegateWrapper fn_wrapper = null;
			fn_wrapper = new RCSharp.MarkedPackageDelegateWrapper (fn, this);
			int raw_ret = rc_resolver_context_foreach_install(Handle, fn_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_spew_info(IntPtr raw);

		public void SpewInfo() {
			rc_resolver_context_spew_info(Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_requirement_is_possible(IntPtr raw, IntPtr dep);

		public bool RequirementIsPossible(RC.PackageDep dep) {
			bool raw_ret = rc_resolver_context_requirement_is_possible(Handle, dep.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_uninstalls(IntPtr raw);

		public GLib.SList Uninstalls { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_uninstalls(Handle);
				GLib.SList ret = new GLib.SList(raw_ret, typeof (RC.Package));
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_upgrades(IntPtr raw);

		public GLib.SList Upgrades { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_upgrades(Handle);
				GLib.SList ret = new GLib.SList(raw_ret, typeof (RC.Package));
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_is_invalid(IntPtr raw);

		public bool IsInvalid { 
			get {
				bool raw_ret = rc_resolver_context_is_invalid(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_foreach_info(IntPtr raw, IntPtr arg1, int priority, RCSharp.ResolverInfoDelegateNative fn, IntPtr user_data);

		public void ForeachInfo(RC.Package arg1, int priority, RC.ResolverInfoDelegate fn) {
			RCSharp.ResolverInfoDelegateWrapper fn_wrapper = null;
			fn_wrapper = new RCSharp.ResolverInfoDelegateWrapper (fn, this);
			rc_resolver_context_foreach_info(Handle, arg1.Handle, priority, fn_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_upgrade_package(IntPtr raw, IntPtr new_package, IntPtr old_package, bool is_soft, int other_penalty);

		public bool UpgradePackage(RC.Package new_package, RC.Package old_package, bool is_soft, int other_penalty) {
			bool raw_ret = rc_resolver_context_upgrade_package(Handle, new_package.Handle, old_package.Handle, is_soft, other_penalty);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_install_package(IntPtr raw, IntPtr package, bool is_soft, int other_penalty);

		public bool InstallPackage(RC.Package package, bool is_soft, int other_penalty) {
			bool raw_ret = rc_resolver_context_install_package(Handle, package.Handle, is_soft, other_penalty);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_get_channel_priority(IntPtr raw, IntPtr arg1);

		public int GetChannelPriority(RC.Channel arg1) {
			int raw_ret = rc_resolver_context_get_channel_priority(Handle, arg1.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_world(IntPtr raw);

		public RC.World World { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_world(Handle);
				RC.World ret;
				if (raw_ret == IntPtr.Zero)
					ret = null;
				else
					ret = (RC.World) GLib.Object.GetObject(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_set_status(IntPtr raw, IntPtr arg1, int status);

		public void SetStatus(RC.Package arg1, RC.PackageStatus status) {
			rc_resolver_context_set_status(Handle, arg1.Handle, (int) status);
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_package_is_absent(IntPtr raw, IntPtr arg1);

		public bool PackageIsAbsent(RC.Package arg1) {
			bool raw_ret = rc_resolver_context_package_is_absent(Handle, arg1.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_ref(IntPtr raw);

		public RC.ResolverContext Ref() {
			IntPtr raw_ret = rc_resolver_context_ref(Handle);
			RC.ResolverContext ret;
			if (raw_ret == IntPtr.Zero)
				ret = null;
			else
				ret = new RC.ResolverContext(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_is_valid(IntPtr raw);

		public bool IsValid { 
			get {
				bool raw_ret = rc_resolver_context_is_valid(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_add_info(IntPtr raw, ref RC.ResolverInfo arg1);

		public void AddInfo(RC.ResolverInfo arg1) {
			rc_resolver_context_add_info(Handle, ref arg1);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_foreach_marked_package(IntPtr raw, RCSharp.MarkedPackageDelegateNative fn, IntPtr user_data);

		public void ForeachMarkedPackage(RC.MarkedPackageDelegate fn) {
			RCSharp.MarkedPackageDelegateWrapper fn_wrapper = null;
			fn_wrapper = new RCSharp.MarkedPackageDelegateWrapper (fn, this);
			rc_resolver_context_foreach_marked_package(Handle, fn_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_foreach_uninstall(IntPtr raw, RCSharp.MarkedPackageDelegateNative fn, IntPtr user_data);

		public int ForeachUninstall(RC.MarkedPackageDelegate fn) {
			RCSharp.MarkedPackageDelegateWrapper fn_wrapper = null;
			fn_wrapper = new RCSharp.MarkedPackageDelegateWrapper (fn, this);
			int raw_ret = rc_resolver_context_foreach_uninstall(Handle, fn_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_uninstall_count(IntPtr raw);

		public int UninstallCount() {
			int raw_ret = rc_resolver_context_uninstall_count(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_add_error_str(IntPtr raw, IntPtr arg1, string str);

		public void AddErrorStr(RC.Package arg1, string str) {
			rc_resolver_context_add_error_str(Handle, arg1.Handle, str);
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_foreach_upgrade(IntPtr raw, RCSharp.MarkedPackagePairDelegateNative fn, IntPtr user_data);

		public int ForeachUpgrade(RC.MarkedPackagePairDelegate fn) {
			RCSharp.MarkedPackagePairDelegateWrapper fn_wrapper = null;
			fn_wrapper = new RCSharp.MarkedPackagePairDelegateWrapper (fn, this);
			int raw_ret = rc_resolver_context_foreach_upgrade(Handle, fn_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_package_is_present(IntPtr raw, IntPtr arg1);

		public bool PackageIsPresent(RC.Package arg1) {
			bool raw_ret = rc_resolver_context_package_is_present(Handle, arg1.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_is_parallel_install(IntPtr raw, IntPtr arg1);

		public bool IsParallelInstall(RC.Package arg1) {
			bool raw_ret = rc_resolver_context_is_parallel_install(Handle, arg1.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_installs(IntPtr raw);

		public GLib.SList Installs { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_installs(Handle);
				GLib.SList ret = new GLib.SList(raw_ret, typeof (RC.Package));
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_spew(IntPtr raw);

		public void Spew() {
			rc_resolver_context_spew(Handle);
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_cmp(IntPtr raw, IntPtr arg1);

		public int Cmp(RC.ResolverContext arg1) {
			int raw_ret = rc_resolver_context_cmp(Handle, arg1.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_unref(IntPtr raw);

		public void Unref() {
			rc_resolver_context_unref(Handle);
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_get_status(IntPtr raw, IntPtr arg1);

		public RC.PackageStatus GetStatus(RC.Package arg1) {
			int raw_ret = rc_resolver_context_get_status(Handle, arg1.Handle);
			RC.PackageStatus ret = (RC.PackageStatus)raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_upgrade_count(IntPtr raw);

		public int UpgradeCount() {
			int raw_ret = rc_resolver_context_upgrade_count(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_requirement_is_met(IntPtr raw, IntPtr dep, bool is_child);

		public bool RequirementIsMet(RC.PackageDep dep, bool is_child) {
			bool raw_ret = rc_resolver_context_requirement_is_met(Handle, dep.Handle, is_child);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_resolver_context_uninstall_package(IntPtr raw, IntPtr package, bool part_of_upgrade, bool due_to_obsolete, bool due_to_unlink);

		public bool UninstallPackage(RC.Package package, bool part_of_upgrade, bool due_to_obsolete, bool due_to_unlink) {
			bool raw_ret = rc_resolver_context_uninstall_package(Handle, package.Handle, part_of_upgrade, due_to_obsolete, due_to_unlink);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_marked_packages(IntPtr raw);

		public GLib.SList MarkedPackages { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_marked_packages(Handle);
				GLib.SList ret = new GLib.SList(raw_ret, typeof (RC.Package));
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_get_info(IntPtr raw);

		public string Info { 
			get {
				IntPtr raw_ret = rc_resolver_context_get_info(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_install_count(IntPtr raw);

		public int InstallCount() {
			int raw_ret = rc_resolver_context_install_count(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_resolver_context_partial_cmp(IntPtr raw, IntPtr arg1);

		public int PartialCmp(RC.ResolverContext arg1) {
			int raw_ret = rc_resolver_context_partial_cmp(Handle, arg1.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_context_add_info_str(IntPtr raw, IntPtr arg1, int priority, string str);

		public void AddInfoStr(RC.Package arg1, int priority, string str) {
			rc_resolver_context_add_info_str(Handle, arg1.Handle, priority, str);
		}

		public ResolverContext(IntPtr raw) : base(raw) {}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_new();

		public ResolverContext () 
		{
			Raw = rc_resolver_context_new();
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_context_new_child(IntPtr parent);

		public ResolverContext (RC.ResolverContext parent) 
		{
			Raw = rc_resolver_context_new_child(parent.Handle);
		}

#endregion
	}
}
