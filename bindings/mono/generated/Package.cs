// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Package : RC.PackageSpec {

		[DllImport("libredcarpet")]
		static extern int rc_package_get_section(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_section(IntPtr raw, int value);

		public RC.PackageSection Section { 
			get {
				int raw_ret = rc_package_get_section(Handle);
				RC.PackageSection ret = (RC.PackageSection)raw_ret;
				return ret;
			}
			set {
				rc_package_set_section(Handle, (int) value);
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_package_add_update(IntPtr raw, IntPtr update);

		public void AddUpdate(RC.PackageUpdate update) {
			rc_package_add_update(Handle, update.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_get_description(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_description(IntPtr raw, string value);

		public string Description { 
			get {
				IntPtr raw_ret = rc_package_get_description(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
			set {
				rc_package_set_description(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_package_relation_from_string(string relation);

		public static RC.PackageRelation RelationFromString(string relation) {
			int raw_ret = rc_package_relation_from_string(relation);
			RC.PackageRelation ret = (RC.PackageRelation)raw_ret;
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_get_summary(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_summary(IntPtr raw, string value);

		public string Summary { 
			get {
				IntPtr raw_ret = rc_package_get_summary(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
			set {
				rc_package_set_summary(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_slist_sort_by_name(IntPtr packages);

		public static GLib.SList SlistSortByName(GLib.SList packages) {
			IntPtr raw_ret = rc_package_slist_sort_by_name(packages.Handle);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_section_to_user_string(int section);

		public static string SectionToUserString(RC.PackageSection section) {
			IntPtr raw_ret = rc_package_section_to_user_string((int) section);
			string ret = Marshal.PtrToStringAnsi(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_slist_sort_by_pretty_name(IntPtr packages);

		public static GLib.SList SlistSortByPrettyName(GLib.SList packages) {
			IntPtr raw_ret = rc_package_slist_sort_by_pretty_name(packages.Handle);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_package_is_installed(IntPtr raw);

		public bool IsInstalled { 
			get {
				bool raw_ret = rc_package_is_installed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_slist_ref(IntPtr packages);

		public static GLib.SList SlistRef(GLib.SList packages) {
			IntPtr raw_ret = rc_package_slist_ref(packages.Handle);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_status_to_string(int status);

		public static string StatusToString(RC.PackageStatus status) {
			IntPtr raw_ret = rc_package_status_to_string((int) status);
			string ret = Marshal.PtrToStringAnsi(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern bool rc_package_is_package_set(IntPtr raw);

		public bool IsPackageSet { 
			get {
				bool raw_ret = rc_package_is_package_set(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_relation_to_string(int relation, int words);

		public static string RelationToString(RC.PackageRelation relation, int words) {
			IntPtr raw_ret = rc_package_relation_to_string((int) relation, words);
			string ret = Marshal.PtrToStringAnsi(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_get_signature_filename(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_signature_filename(IntPtr raw, string filename);

		public string SignatureFilename { 
			get {
				IntPtr raw_ret = rc_package_get_signature_filename(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
			set {
				rc_package_set_signature_filename(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_package_is_install_only(IntPtr raw);

		public bool IsInstallOnly { 
			get {
				bool raw_ret = rc_package_is_install_only(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_to_str(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = rc_package_to_str(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_get_channel(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_channel(IntPtr raw, IntPtr channel);

		public RC.Channel Channel { 
			get {
				IntPtr raw_ret = rc_package_get_channel(Handle);
				RC.Channel ret;
				if (raw_ret == IntPtr.Zero)
					ret = null;
				else
					ret = new RC.Channel(raw_ret);
				return ret;
			}
			set {
				rc_package_set_channel(Handle, value.Handle);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_hash_table_by_string_to_list(System.IntPtr ht);

		public static GLib.SList HashTableByStringToList(System.IntPtr ht) {
			IntPtr raw_ret = rc_package_hash_table_by_string_to_list(ht);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_hash_table_by_spec_to_list(System.IntPtr ht);

		public static GLib.SList HashTableBySpecToList(System.IntPtr ht) {
			IntPtr raw_ret = rc_package_hash_table_by_spec_to_list(ht);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern uint rc_package_get_file_size(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_file_size(IntPtr raw, uint value);

		public uint FileSize { 
			get {
				uint raw_ret = rc_package_get_file_size(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				rc_package_set_file_size(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_get_latest_update(IntPtr raw);

		public RC.PackageUpdate LatestUpdate { 
			get {
				IntPtr raw_ret = rc_package_get_latest_update(Handle);
				RC.PackageUpdate ret;
				if (raw_ret == IntPtr.Zero)
					ret = null;
				else
					ret = new RC.PackageUpdate(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_package_spew_leaks();

		public static void SpewLeaks() {
			rc_package_spew_leaks();
		}

		[DllImport("libredcarpet")]
		static extern int rc_package_get_arch(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_arch(IntPtr raw, int value);

		public RC.Arch Arch { 
			get {
				int raw_ret = rc_package_get_arch(Handle);
				RC.Arch ret = (RC.Arch)raw_ret;
				return ret;
			}
			set {
				rc_package_set_arch(Handle, (int) value);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = rc_package_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_package_is_synthetic(IntPtr raw);

		public bool IsSynthetic { 
			get {
				bool raw_ret = rc_package_is_synthetic(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_get_filename(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_filename(IntPtr raw, string filename);

		public string Filename { 
			get {
				IntPtr raw_ret = rc_package_get_filename(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
			set {
				rc_package_set_filename(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern uint rc_package_get_installed_size(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_package_set_installed_size(IntPtr raw, uint value);

		public uint InstalledSize { 
			get {
				uint raw_ret = rc_package_get_installed_size(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				rc_package_set_installed_size(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_section_to_string(int section);

		public static string SectionToString(RC.PackageSection section) {
			IntPtr raw_ret = rc_package_section_to_string((int) section);
			string ret = Marshal.PtrToStringAnsi(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_package_slist_unref(IntPtr packages);

		public static void SlistUnref(GLib.SList packages) {
			rc_package_slist_unref(packages.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_package_add_dummy_update(IntPtr raw, string package_filename, uint package_size);

		public void AddDummyUpdate(string package_filename, uint package_size) {
			rc_package_add_dummy_update(Handle, package_filename, package_size);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_new();

		public Package () 
		{
			Raw = rc_package_new();
		}

#endregion
#region Customized extensions
#line 1 "Package.custom"
    
    private string id;

    public string Id {
        get { return id; }
        set { id = value; }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_updates(IntPtr raw);

    public RC.PackageUpdate[] Updates {
        get {
            IntPtr raw_ret = rc_package_get_updates(Handle);
            RC.PackageUpdate[] ret;
            if (raw_ret != IntPtr.Zero) {
                GLib.SList slist = new GLib.SList(raw_ret, typeof (RC.PackageUpdate));
                ret = new RC.PackageUpdate[slist.Count];
                int i = 0;
                foreach (RC.PackageUpdate u in slist)
                    ret[i++] = u;
            } else
                ret = new RC.PackageUpdate[0];

            return ret;
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_ref(IntPtr raw);

    public Package (IntPtr raw, bool owned_ref) : base (raw) {
        if (!owned_ref)
            rc_package_ref (Handle);
    }

    public Package(IntPtr raw) : this(raw, false) {}

    private bool disposed = false;

    public void Dispose () {
        Dispose (true);
        GC.SuppressFinalize (this);
    }

    [DllImport("libredcarpet")]
    static extern void rc_package_unref(IntPtr raw);

    private void Dispose (bool disposing) {
        if (!disposed) {
            rc_package_unref (Handle);
            disposed = true;
        }
    }

    ~Package () {
        Dispose (false);
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_copy(IntPtr raw);

    // ICloneable
    public Object Clone () {
        IntPtr raw_ret = rc_package_copy(Handle);
        RC.Package ret;
        if (raw_ret == IntPtr.Zero)
            ret = null;
        else
            ret = new RC.Package(raw_ret, true);
        return ret;
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_children(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_children(IntPtr raw, IntPtr value);

    public PackageDep[] Children { 
        get {
            IntPtr raw_ret = rc_package_get_children(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_children(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_conflicts(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_conflicts(IntPtr raw, IntPtr value);

    public PackageDep[] Conflicts { 
        get {
            IntPtr raw_ret = rc_package_get_conflicts(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_conflicts(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_obsoletes(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_obsoletes(IntPtr raw, IntPtr value);

    public PackageDep[] Obsoletes { 
        get {
            IntPtr raw_ret = rc_package_get_obsoletes(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_obsoletes(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_provides(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_provides(IntPtr raw, IntPtr value);

    public PackageDep[] Provides { 
        get {
            IntPtr raw_ret = rc_package_get_provides(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_provides(Handle, slist.Handle);
        }
    }
    
    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_recommends(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_recommends(IntPtr raw, IntPtr value);

    public PackageDep[] Recommends { 
        get {
            IntPtr raw_ret = rc_package_get_recommends(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_recommends(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_requires(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_requires(IntPtr raw, IntPtr value);

    public PackageDep[] Requires { 
        get {
            IntPtr raw_ret = rc_package_get_requires (Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_requires(Handle, slist.Handle);
        }
    }

    [DllImport("libredcarpet")]
    static extern IntPtr rc_package_get_suggests(IntPtr raw);

    [DllImport("libredcarpet")]
    static extern void rc_package_set_suggests(IntPtr raw, IntPtr value);

    public PackageDep[] Suggests { 
        get {
            IntPtr raw_ret = rc_package_get_suggests(Handle);
            return PackageDep.FromSListPtr (raw_ret);
        }
        set {
            GLib.SList slist = PackageDep.ToSList (value);
            rc_package_set_suggests(Handle, slist.Handle);
        }
    }


    public void ToXml (System.Xml.XmlTextWriter writer)
    {
        writer.WriteStartElement ("package");

        writer.WriteElementString ("name", this.Name);

        if (this.HasEpoch)
            writer.WriteElementString ("epoch", System.Xml.XmlConvert.ToString (this.Epoch));

        writer.WriteElementString ("version", this.Version);
        writer.WriteElementString ("release", this.Release);
        writer.WriteElementString ("summary", this.Summary);
        writer.WriteElementString ("description", this.Description);
        writer.WriteElementString ("arch", RC.Global.ArchToString (this.Arch));
        writer.WriteElementString ("section", Package.SectionToString (this.Section));
        writer.WriteElementString ("filesize", System.Xml.XmlConvert.ToString (this.FileSize));
        writer.WriteElementString ("installedsize", System.Xml.XmlConvert.ToString (this.InstalledSize));

        if (this.IsInstallOnly)
            writer.WriteElementString ("install_only", "1");

        if (this.IsPackageSet)
            writer.WriteElementString ("package_set", "1");

        if (this.Updates != null) {
            writer.WriteStartElement ("history");
            foreach (PackageUpdate update in this.Updates)
                update.ToXml (writer);
            writer.WriteEndElement ();
        }

        writer.WriteStartElement ("deps");

        PackageDep[] deps;

        deps = this.Requires;
        if (deps.Length > 0) {
            writer.WriteStartElement ("requires");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Recommends;
        if (deps.Length > 0) {
            writer.WriteStartElement ("recommends");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Suggests;
        if (deps.Length > 0) {
            writer.WriteStartElement ("suggests");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Conflicts;
        if (deps.Length > 0) {
            writer.WriteStartElement ("conflicts");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Obsoletes;
        if (deps.Length > 0) {
            writer.WriteStartElement ("obsoletes");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Children;
        if (deps.Length > 0) {
            writer.WriteStartElement ("children");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        deps = this.Provides;
        if (deps.Length > 0) {
            writer.WriteStartElement ("provides");
            foreach (PackageDep dep in deps)
                dep.ToXml (writer);
            writer.WriteEndElement ();
        }

        writer.WriteEndElement (); // "deps"
        writer.WriteEndElement (); // "package"
    }

#endregion
	}
}
