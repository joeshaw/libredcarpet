// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;
	using System.Runtime.InteropServices;

	internal delegate void voidObjectulongulongDelegate(IntPtr arg0, ulong arg1, ulong arg2, int key);

	internal class voidObjectulongulongSignal : GLib.SignalCallback {

		private static voidObjectulongulongDelegate _Delegate;

		private static void voidObjectulongulongCallback(IntPtr arg0, ulong arg1, ulong arg2, int key)
		{
			if (!_Instances.Contains(key))
				throw new Exception("Unexpected signal key " + key);

			voidObjectulongulongSignal inst = (voidObjectulongulongSignal) _Instances[key];
			GLib.SignalArgs args = (GLib.SignalArgs) Activator.CreateInstance (inst._argstype);
			args.Args = new object[2];
			args.Args[0] = arg1;
			args.Args[1] = arg2;
			object[] argv = new object[2];
			argv[0] = inst._obj;
			argv[1] = args;
			inst._handler.DynamicInvoke(argv);
		}

		public voidObjectulongulongSignal(GLib.Object obj, string name, Delegate eh, Type argstype, int connect_flags) : base(obj, eh, argstype)
		{
			if (_Delegate == null) {
				_Delegate = new voidObjectulongulongDelegate(voidObjectulongulongCallback);
			}
			Connect (name, _Delegate, connect_flags);
		}

		protected override void Dispose (bool disposing)
		{
			_Instances.Remove(_key);
			if(_Instances.Count == 0)
				_Delegate = null;

			Disconnect ();
			base.Dispose (disposing);
		}
	}
}
