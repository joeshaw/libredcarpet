// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void WorldRemoveLockDelegateNative(IntPtr world, IntPtr _lock);

	internal class WorldRemoveLockDelegateWrapper {

		public void NativeCallback (IntPtr world, IntPtr _lock)
		{
			RC.World _arg0 = GLib.Object.GetObject(world) as RC.World;
			RC.PackageMatch _arg1 = _lock == IntPtr.Zero ? null : (RC.PackageMatch) GLib.Opaque.GetOpaque (_lock, typeof (RC.PackageMatch), false);
			managed ( _arg0,  _arg1);
		}

		internal WorldRemoveLockDelegateNative NativeDelegate;
		RC.WorldRemoveLockDelegate managed;

		public WorldRemoveLockDelegateWrapper (RC.WorldRemoveLockDelegate managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new WorldRemoveLockDelegateNative (NativeCallback);
		}

		public static RC.WorldRemoveLockDelegate GetManagedDelegate (WorldRemoveLockDelegateNative native)
		{
			if (native == null)
				return null;
			WorldRemoveLockDelegateWrapper wrapper = (WorldRemoveLockDelegateWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
