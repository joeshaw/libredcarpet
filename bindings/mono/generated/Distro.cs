// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Distro : GLib.Opaque {

		[DllImport("libredcarpet")]
		static extern IntPtr rc_distro_get_death_date(IntPtr raw);

		public System.DateTime DeathDate { 
			get {
				IntPtr raw_ret = rc_distro_get_death_date(Handle);
				System.DateTime ret = GLib.Marshaller.time_tToDateTime (raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_distro_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = rc_distro_get_name(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_distro_get_arch(IntPtr raw);

		public RC.Arch Arch { 
			get {
				int raw_ret = rc_distro_get_arch(Handle);
				RC.Arch ret = (RC.Arch)raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_distro_get_target(IntPtr raw);

		public string Target { 
			get {
				IntPtr raw_ret = rc_distro_get_target(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_distro_parse_xml(string xml_buf, uint compressed_length);

		public static RC.Distro ParseXml(string xml_buf) {
			IntPtr raw_ret = rc_distro_parse_xml(xml_buf, (uint) xml_buf.Length);
			RC.Distro ret;
			if (raw_ret == IntPtr.Zero)
				ret = null;
			else
				ret = new RC.Distro(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_distro_get_package_type(IntPtr raw);

		public RC.DistroPackageType PackageType { 
			get {
				int raw_ret = rc_distro_get_package_type(Handle);
				RC.DistroPackageType ret = (RC.DistroPackageType)raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_distro_free(IntPtr raw);

		public void Free() {
			rc_distro_free(Handle);
		}

		[DllImport("libredcarpet")]
		static extern int rc_distro_get_status(IntPtr raw);

		public RC.DistroStatus Status { 
			get {
				int raw_ret = rc_distro_get_status(Handle);
				RC.DistroStatus ret = (RC.DistroStatus)raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_distro_get_current();

		public static RC.Distro Current { 
			get {
				IntPtr raw_ret = rc_distro_get_current();
				RC.Distro ret;
				if (raw_ret == IntPtr.Zero)
					ret = null;
				else
					ret = new RC.Distro(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_distro_get_version(IntPtr raw);

		public string Version { 
			get {
				IntPtr raw_ret = rc_distro_get_version(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
		}

		public Distro(IntPtr raw) : base(raw) {}

#endregion
#region Customized extensions
#line 1 "Distro.custom"

public static RC.Distro ParseXml () {
    IntPtr raw_ret = rc_distro_parse_xml(null, 0);
    RC.Distro ret = new RC.Distro(raw_ret);

    return ret;
}

#endregion
	}
}
