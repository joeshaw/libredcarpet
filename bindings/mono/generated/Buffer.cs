// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct Buffer {

		private IntPtr _data;
		private UIntPtr size;

		public ulong Size {
			get {
				return (ulong) size;
			}
			set {
				size = new UIntPtr (value);
			}
		}
		public bool IsMmapped;

		public static RC.Buffer Zero = new RC.Buffer ();

		public static RC.Buffer New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return RC.Buffer.Zero;
			}
			RC.Buffer self = new RC.Buffer();
			self = (RC.Buffer) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("libredcarpet")]
		static extern void rc_buffer_unmap_file(ref RC.Buffer raw);

		public void UnmapFile() {
			rc_buffer_unmap_file(ref this);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_buffer_map_file(string filename);

		public static RC.Buffer MapFile(string filename) {
			IntPtr raw_ret = rc_buffer_map_file(filename);
			RC.Buffer ret = RC.Buffer.New (raw_ret);
			return ret;
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
