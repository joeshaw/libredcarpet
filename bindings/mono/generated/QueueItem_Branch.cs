// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct QueueItem_Branch {

		private IntPtr _parent;
		public RC.QueueItem Parent {
			get {
				return _parent == IntPtr.Zero ? null : (RC.QueueItem) GLib.Opaque.GetOpaque (_parent, typeof (RC.QueueItem), false);
			}
			set {
				_parent = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public string Label;
		private IntPtr _possible_items;

		public static RC.QueueItem_Branch Zero = new RC.QueueItem_Branch ();

		public static RC.QueueItem_Branch New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return RC.QueueItem_Branch.Zero;
			}
			RC.QueueItem_Branch self = new RC.QueueItem_Branch();
			self = (RC.QueueItem_Branch) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
