// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate bool WorldTransactDelegateNative(IntPtr world, IntPtr install_packages, IntPtr remove_packages, int flags);

	internal class WorldTransactDelegateWrapper {

		public bool NativeCallback (IntPtr world, IntPtr install_packages, IntPtr remove_packages, int flags)
		{
			RC.World _arg0 = GLib.Object.GetObject(world) as RC.World;
			GLib.SList _arg1 = new GLib.SList(install_packages);
			GLib.SList _arg2 = new GLib.SList(remove_packages);
			int _arg3 = flags;
			return (bool) managed ( _arg0,  _arg1,  _arg2,  _arg3);
		}

		internal WorldTransactDelegateNative NativeDelegate;
		RC.WorldTransactDelegate managed;

		public WorldTransactDelegateWrapper (RC.WorldTransactDelegate managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new WorldTransactDelegateNative (NativeCallback);
		}

		public static RC.WorldTransactDelegate GetManagedDelegate (WorldTransactDelegateNative native)
		{
			if (native == null)
				return null;
			WorldTransactDelegateWrapper wrapper = (WorldTransactDelegateWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
