// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RCSharp {

	using System;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate bool WorldGetSubscribedDelegateNative(IntPtr world, IntPtr channel);

	internal class WorldGetSubscribedDelegateWrapper {

		public bool NativeCallback (IntPtr world, IntPtr channel)
		{
			RC.World _arg0 = GLib.Object.GetObject(world) as RC.World;
			RC.Channel _arg1 = channel == IntPtr.Zero ? null : (RC.Channel) GLib.Opaque.GetOpaque (channel, typeof (RC.Channel), false);
			return (bool) managed ( _arg0,  _arg1);
		}

		internal WorldGetSubscribedDelegateNative NativeDelegate;
		RC.WorldGetSubscribedDelegate managed;

		public WorldGetSubscribedDelegateWrapper (RC.WorldGetSubscribedDelegate managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new WorldGetSubscribedDelegateNative (NativeCallback);
		}

		public static RC.WorldGetSubscribedDelegate GetManagedDelegate (WorldGetSubscribedDelegateNative native)
		{
			if (native == null)
				return null;
			WorldGetSubscribedDelegateWrapper wrapper = (WorldGetSubscribedDelegateWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
