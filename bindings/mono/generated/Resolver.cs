// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Resolver : GLib.Opaque {

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_package_to_remove(IntPtr raw, IntPtr arg1);

		public void AddPackageToRemove(RC.Package arg1) {
			rc_resolver_add_package_to_remove(Handle, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_set_current_channel(IntPtr raw, IntPtr arg1);

		public RC.Channel CurrentChannel { 
			set {
				rc_resolver_set_current_channel(Handle, value.Handle);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_get_invalid_queues(IntPtr raw);

		public GLib.SList InvalidQueues { 
			get {
				IntPtr raw_ret = rc_resolver_get_invalid_queues(Handle);
				GLib.SList ret = new GLib.SList(raw_ret, typeof (RC.ResolverQueue));
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_set_timeout(IntPtr raw, int seconds);

		public int Timeout { 
			set {
				rc_resolver_set_timeout(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_package_to_install(IntPtr raw, IntPtr arg1);

		public void AddPackageToInstall(RC.Package arg1) {
			rc_resolver_add_package_to_install(Handle, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_resolve_dependencies(IntPtr raw);

		public void ResolveDependencies() {
			rc_resolver_resolve_dependencies(Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_get_world(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_resolver_set_world(IntPtr raw, IntPtr arg1);

		public RC.World World { 
			get {
				IntPtr raw_ret = rc_resolver_get_world(Handle);
				RC.World ret;
				if (raw_ret == IntPtr.Zero)
					ret = null;
				else
					ret = (RC.World) GLib.Object.GetObject(raw_ret);
				return ret;
			}
			set {
				rc_resolver_set_world(Handle, value.Handle);
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_packages_to_install_from_slist(IntPtr raw, IntPtr arg1);

		public void AddPackagesToInstallFromSlist(GLib.SList arg1) {
			rc_resolver_add_packages_to_install_from_slist(Handle, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_verify_system(IntPtr raw);

		public void VerifySystem() {
			rc_resolver_verify_system(Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_free(IntPtr raw);

		public void Free() {
			rc_resolver_free(Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_get_best_context(IntPtr raw);

		public RC.ResolverContext BestContext { 
			get {
				IntPtr raw_ret = rc_resolver_get_best_context(Handle);
				RC.ResolverContext ret;
				if (raw_ret == IntPtr.Zero)
					ret = null;
				else
					ret = new RC.ResolverContext(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_extra_dependency(IntPtr raw, IntPtr arg1);

		public void AddExtraDependency(RC.PackageDep arg1) {
			rc_resolver_add_extra_dependency(Handle, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_extra_conflict(IntPtr raw, IntPtr arg1);

		public void AddExtraConflict(RC.PackageDep arg1) {
			rc_resolver_add_extra_conflict(Handle, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_packages_to_remove_from_slist(IntPtr raw, IntPtr arg1);

		public void AddPackagesToRemoveFromSlist(GLib.SList arg1) {
			rc_resolver_add_packages_to_remove_from_slist(Handle, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = rc_resolver_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_subscribed_channel(IntPtr raw, IntPtr arg1);

		public void AddSubscribedChannel(RC.Channel arg1) {
			rc_resolver_add_subscribed_channel(Handle, arg1.Handle);
		}

		public Resolver(IntPtr raw) : base(raw) {}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_new();

		public Resolver () 
		{
			Raw = rc_resolver_new();
		}

#endregion
	}
}
