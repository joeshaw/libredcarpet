// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Resolver : GLib.Opaque {

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_current_channel_offset ();

		static uint current_channel_offset = rcsharp_rc_resolver_get_current_channel_offset ();
		[DllImport("libredcarpet")]
		static extern void rc_resolver_set_current_channel(IntPtr raw, IntPtr arg1);

		public RC.Channel CurrentChannel {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + current_channel_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (RC.Channel) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (RC.Channel), false);
				}
			}
			set  {
				rc_resolver_set_current_channel(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_timed_out_offset ();

		static uint timed_out_offset = rcsharp_rc_resolver_get_timed_out_offset ();
		public bool TimedOut {
			get {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + timed_out_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + timed_out_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_packages_to_install_offset ();

		static uint packages_to_install_offset = rcsharp_rc_resolver_get_packages_to_install_offset ();
		public GLib.SList PackagesToInstall {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + packages_to_install_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + packages_to_install_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_get_world(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_resolver_set_world(IntPtr raw, IntPtr arg1);

		public RC.World World {
			get  {
				IntPtr raw_ret = rc_resolver_get_world(Handle);
				RC.World ret = GLib.Object.GetObject(raw_ret) as RC.World;
				return ret;
			}
			set  {
				rc_resolver_set_world(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_verifying_offset ();

		static uint verifying_offset = rcsharp_rc_resolver_get_verifying_offset ();
		public bool Verifying {
			get {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + verifying_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + verifying_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_packages_to_remove_offset ();

		static uint packages_to_remove_offset = rcsharp_rc_resolver_get_packages_to_remove_offset ();
		public GLib.SList PackagesToRemove {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + packages_to_remove_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + packages_to_remove_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_extra_deps_offset ();

		static uint extra_deps_offset = rcsharp_rc_resolver_get_extra_deps_offset ();
		public GLib.SList ExtraDeps {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + extra_deps_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + extra_deps_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_pruned_queues_offset ();

		static uint pruned_queues_offset = rcsharp_rc_resolver_get_pruned_queues_offset ();
		public GLib.SList PrunedQueues {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + pruned_queues_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + pruned_queues_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_valid_solution_count_offset ();

		static uint valid_solution_count_offset = rcsharp_rc_resolver_get_valid_solution_count_offset ();
		public int ValidSolutionCount {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + valid_solution_count_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + valid_solution_count_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_extra_conflicts_offset ();

		static uint extra_conflicts_offset = rcsharp_rc_resolver_get_extra_conflicts_offset ();
		public GLib.SList ExtraConflicts {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + extra_conflicts_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + extra_conflicts_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_timeout_seconds_offset ();

		static uint timeout_seconds_offset = rcsharp_rc_resolver_get_timeout_seconds_offset ();
		public int TimeoutSeconds {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + timeout_seconds_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + timeout_seconds_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_deferred_queues_offset ();

		static uint deferred_queues_offset = rcsharp_rc_resolver_get_deferred_queues_offset ();
		public GLib.SList DeferredQueues {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + deferred_queues_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + deferred_queues_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_get_invalid_queues(IntPtr raw);

		public RC.ResolverQueue[] InvalidQueues {
			get  {
				IntPtr raw_ret = rc_resolver_get_invalid_queues(Handle);
				RC.ResolverQueue[] ret = (RC.ResolverQueue[]) GLib.Marshaller.ListToArray (new GLib.SList(raw_ret, typeof (RC.ResolverQueue), false, false), typeof (RC.ResolverQueue));
				return ret;
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_pending_queues_offset ();

		static uint pending_queues_offset = rcsharp_rc_resolver_get_pending_queues_offset ();
		public GLib.SList PendingQueues {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + pending_queues_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + pending_queues_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_packages_to_verify_offset ();

		static uint packages_to_verify_offset = rcsharp_rc_resolver_get_packages_to_verify_offset ();
		public GLib.SList PackagesToVerify {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + packages_to_verify_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + packages_to_verify_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_complete_queues_offset ();

		static uint complete_queues_offset = rcsharp_rc_resolver_get_complete_queues_offset ();
		public GLib.SList CompleteQueues {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + complete_queues_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + complete_queues_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport ("libredcarpetsharpglue-0")]
		extern static uint rcsharp_rc_resolver_get_initial_items_offset ();

		static uint initial_items_offset = rcsharp_rc_resolver_get_initial_items_offset ();
		public GLib.SList InitialItems {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + initial_items_offset);
					return new GLib.SList((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + initial_items_offset);
					*raw_ptr = value.Handle;
				}
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_get_best_context(IntPtr raw);

		public RC.ResolverContext BestContext {
			get  {
				IntPtr raw_ret = rc_resolver_get_best_context(Handle);
				RC.ResolverContext ret = raw_ret == IntPtr.Zero ? null : (RC.ResolverContext) GLib.Opaque.GetOpaque (raw_ret, typeof (RC.ResolverContext), false);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_package_to_remove(IntPtr raw, IntPtr arg1);

		public void AddPackageToRemove(RC.Package arg1) {
			rc_resolver_add_package_to_remove(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_set_timeout(IntPtr raw, int seconds);

		public int Timeout { 
			set {
				rc_resolver_set_timeout(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_package_to_install(IntPtr raw, IntPtr arg1);

		public void AddPackageToInstall(RC.Package arg1) {
			rc_resolver_add_package_to_install(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_resolve_dependencies(IntPtr raw);

		public void ResolveDependencies() {
			rc_resolver_resolve_dependencies(Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_packages_to_install_from_slist(IntPtr raw, IntPtr arg1);

		public void AddPackagesToInstallFromSlist(GLib.SList arg1) {
			rc_resolver_add_packages_to_install_from_slist(Handle, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_verify_system(IntPtr raw);

		public void VerifySystem() {
			rc_resolver_verify_system(Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_extra_dependency(IntPtr raw, IntPtr arg1);

		public void AddExtraDependency(RC.PackageDep arg1) {
			rc_resolver_add_extra_dependency(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_extra_conflict(IntPtr raw, IntPtr arg1);

		public void AddExtraConflict(RC.PackageDep arg1) {
			rc_resolver_add_extra_conflict(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_packages_to_remove_from_slist(IntPtr raw, IntPtr arg1);

		public void AddPackagesToRemoveFromSlist(GLib.SList arg1) {
			rc_resolver_add_packages_to_remove_from_slist(Handle, arg1.Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = rc_resolver_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_add_subscribed_channel(IntPtr raw, IntPtr arg1);

		public void AddSubscribedChannel(RC.Channel arg1) {
			rc_resolver_add_subscribed_channel(Handle, arg1 == null ? IntPtr.Zero : arg1.Handle);
		}

		public Resolver(IntPtr raw) : base(raw) {}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_resolver_new();

		public Resolver () 
		{
			Raw = rc_resolver_new();
		}

		[DllImport("libredcarpet")]
		static extern void rc_resolver_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			rc_resolver_free (raw);
		}

#endregion
	}
}
