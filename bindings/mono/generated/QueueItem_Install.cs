// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct QueueItem_Install {

		public RC.QueueItem Parent;
		private IntPtr _package;

		public RC.Package package {
			get { 
				RC.Package ret = new RC.Package(_package);
				if (ret == null) ret = new RC.Package(_package);
				return ret;
			}
			set { _package = value.Handle; }
		}
		private IntPtr _upgrades;

		public RC.Package upgrades {
			get { 
				RC.Package ret = new RC.Package(_upgrades);
				if (ret == null) ret = new RC.Package(_upgrades);
				return ret;
			}
			set { _upgrades = value.Handle; }
		}
		private IntPtr _deps_satisfied_by_this_install;
		private IntPtr _needed_by;
		public int ChannelPriority;
		public int OtherPenalty;
		private uint _bitfield0;

		public static RC.QueueItem_Install Zero = new RC.QueueItem_Install ();

		public static RC.QueueItem_Install New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return RC.QueueItem_Install.Zero;
			}
			RC.QueueItem_Install self = new RC.QueueItem_Install();
			self = (RC.QueueItem_Install) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

#endregion
	}
}
