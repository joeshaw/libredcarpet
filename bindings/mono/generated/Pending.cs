// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Pending : GLib.Object {

		~Pending()
		{
			Dispose();
		}

		protected Pending(GLib.GType gtype) : base(gtype) {}
		public Pending(IntPtr raw) : base(raw) {}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_new(string description);

		public Pending (string description) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pending)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = rc_pending_new(description);
		}

		delegate void UpdatedDelegate (IntPtr arg1);

		static UpdatedDelegate UpdatedCallback;

		static void updated_cb (IntPtr arg1)
		{
			Pending obj = GLib.Object.GetObject (arg1, false) as Pending;
			obj.OnUpdated ();
		}

		private static void OverrideUpdated (GLib.GType gtype)
		{
			if (UpdatedCallback == null)
				UpdatedCallback = new UpdatedDelegate (updated_cb);
			OverrideVirtualMethod (gtype, "update", UpdatedCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(RC.Pending), ConnectionMethod="OverrideUpdated")]
		protected virtual void OnUpdated ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("update")]
		public event System.EventHandler Updated {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["update"] == null)
						BeforeSignals["update"] = new RCSharp.voidObjectSignal(this, "update", value, typeof (System.EventArgs), 0);					else
						((GLib.SignalCallback) BeforeSignals ["update"]).AddDelegate (value);
					BeforeHandlers.AddHandler("update", value);
				} else {
					if (AfterHandlers["update"] == null)
						AfterSignals["update"] = new RCSharp.voidObjectSignal(this, "update", value, typeof (System.EventArgs), 1);					else
						((GLib.SignalCallback) AfterSignals ["update"]).AddDelegate (value);
					AfterHandlers.AddHandler("update", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["update"] as GLib.SignalCallback;
				event_list.RemoveHandler("update", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["update"] == null) {
					signals.Remove("update");
					cb.Dispose ();
				}
			}
		}

		delegate void MessageDelegate (IntPtr arg1);

		static MessageDelegate MessageCallback;

		static void message_cb (IntPtr arg1)
		{
			Pending obj = GLib.Object.GetObject (arg1, false) as Pending;
			obj.OnMessage ();
		}

		private static void OverrideMessage (GLib.GType gtype)
		{
			if (MessageCallback == null)
				MessageCallback = new MessageDelegate (message_cb);
			OverrideVirtualMethod (gtype, "message", MessageCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(RC.Pending), ConnectionMethod="OverrideMessage")]
		protected virtual void OnMessage ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("message")]
		public event System.EventHandler Message {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["message"] == null)
						BeforeSignals["message"] = new RCSharp.voidObjectSignal(this, "message", value, typeof (System.EventArgs), 0);					else
						((GLib.SignalCallback) BeforeSignals ["message"]).AddDelegate (value);
					BeforeHandlers.AddHandler("message", value);
				} else {
					if (AfterHandlers["message"] == null)
						AfterSignals["message"] = new RCSharp.voidObjectSignal(this, "message", value, typeof (System.EventArgs), 1);					else
						((GLib.SignalCallback) AfterSignals ["message"]).AddDelegate (value);
					AfterHandlers.AddHandler("message", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["message"] as GLib.SignalCallback;
				event_list.RemoveHandler("message", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["message"] == null) {
					signals.Remove("message");
					cb.Dispose ();
				}
			}
		}

		delegate void CompleteDelegate (IntPtr arg1);

		static CompleteDelegate CompleteCallback;

		static void complete_cb (IntPtr arg1)
		{
			Pending obj = GLib.Object.GetObject (arg1, false) as Pending;
			obj.OnComplete ();
		}

		private static void OverrideComplete (GLib.GType gtype)
		{
			if (CompleteCallback == null)
				CompleteCallback = new CompleteDelegate (complete_cb);
			OverrideVirtualMethod (gtype, "complete", CompleteCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(RC.Pending), ConnectionMethod="OverrideComplete")]
		protected virtual void OnComplete ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("complete")]
		public event System.EventHandler Complete {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["complete"] == null)
						BeforeSignals["complete"] = new RCSharp.voidObjectSignal(this, "complete", value, typeof (System.EventArgs), 0);					else
						((GLib.SignalCallback) BeforeSignals ["complete"]).AddDelegate (value);
					BeforeHandlers.AddHandler("complete", value);
				} else {
					if (AfterHandlers["complete"] == null)
						AfterSignals["complete"] = new RCSharp.voidObjectSignal(this, "complete", value, typeof (System.EventArgs), 1);					else
						((GLib.SignalCallback) AfterSignals ["complete"]).AddDelegate (value);
					AfterHandlers.AddHandler("complete", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["complete"] as GLib.SignalCallback;
				event_list.RemoveHandler("complete", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["complete"] == null) {
					signals.Remove("complete");
					cb.Dispose ();
				}
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_pending_update_by_size(IntPtr raw, int size, int total_size);

		public void UpdateBySize(int size, int total_size) {
			rc_pending_update_by_size(Handle, size, total_size);
		}

		[DllImport("libredcarpet")]
		static extern int rc_pending_get_id(IntPtr raw);

		public int Id { 
			get {
				int raw_ret = rc_pending_get_id(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_pending_get_elapsed_secs(IntPtr raw);

		public int ElapsedSecs { 
			get {
				int raw_ret = rc_pending_get_elapsed_secs(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_pending_get_total_size(IntPtr raw);

		public int TotalSize { 
			get {
				int raw_ret = rc_pending_get_total_size(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_pending_get_remaining_secs(IntPtr raw);

		public int RemainingSecs { 
			get {
				int raw_ret = rc_pending_get_remaining_secs(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_pending_finished(IntPtr raw, int retval);

		public void Finished(int retval) {
			rc_pending_finished(Handle, retval);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = rc_pending_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_pending_add_message(IntPtr raw, string message);

		public void AddMessage(string message) {
			rc_pending_add_message(Handle, message);
		}

		[DllImport("libredcarpet")]
		static extern void rc_pending_abort(IntPtr raw, int retval);

		public void Abort(int retval) {
			rc_pending_abort(Handle, retval);
		}

		[DllImport("libredcarpet")]
		static extern void rc_pending_begin(IntPtr raw);

		public void Begin() {
			rc_pending_begin(Handle);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_status_to_string(int status);

		public static string StatusToString(RC.PendingStatus status) {
			IntPtr raw_ret = rc_pending_status_to_string((int) status);
			string ret = Marshal.PtrToStringAnsi(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern int rc_pending_get_completed_size(IntPtr raw);

		public int CompletedSize { 
			get {
				int raw_ret = rc_pending_get_completed_size(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_get_last_time(IntPtr raw);

		public System.DateTime LastTime { 
			get {
				IntPtr raw_ret = rc_pending_get_last_time(Handle);
				System.DateTime ret = GLib.Marshaller.time_tToDateTime (raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_pending_update(IntPtr raw, double percent_complete);

		public void Update(double percent_complete) {
			rc_pending_update(Handle, percent_complete);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_get_all_active_ids();

		public static GLib.SList AllActiveIds { 
			get {
				IntPtr raw_ret = rc_pending_get_all_active_ids();
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern int rc_pending_get_expected_secs(IntPtr raw);

		public int ExpectedSecs { 
			get {
				int raw_ret = rc_pending_get_expected_secs(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_get_messages(IntPtr raw);

		public GLib.SList Messages { 
			get {
				IntPtr raw_ret = rc_pending_get_messages(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_pending_fail(IntPtr raw, int retval, string error_msg);

		public void Fail(int retval, string error_msg) {
			rc_pending_fail(Handle, retval, error_msg);
		}

		[DllImport("libredcarpet")]
		static extern int rc_pending_get_status(IntPtr raw);

		public RC.PendingStatus Status { 
			get {
				int raw_ret = rc_pending_get_status(Handle);
				RC.PendingStatus ret = (RC.PendingStatus)raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_get_error_msg(IntPtr raw);

		public string ErrorMsg { 
			get {
				IntPtr raw_ret = rc_pending_get_error_msg(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_lookup_by_id(int id);

		public static RC.Pending LookupById(int id) {
			IntPtr raw_ret = rc_pending_lookup_by_id(id);
			RC.Pending ret;
			if (raw_ret == IntPtr.Zero)
				ret = null;
			else
				ret = (RC.Pending) GLib.Object.GetObject(raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_get_description(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_pending_set_description(IntPtr raw, string desc);

		public string Description { 
			get {
				IntPtr raw_ret = rc_pending_get_description(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
			set {
				rc_pending_set_description(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_get_start_time(IntPtr raw);

		public System.DateTime StartTime { 
			get {
				IntPtr raw_ret = rc_pending_get_start_time(Handle);
				System.DateTime ret = GLib.Marshaller.time_tToDateTime (raw_ret);
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern double rc_pending_get_percent_complete(IntPtr raw);

		public double PercentComplete { 
			get {
				double raw_ret = rc_pending_get_percent_complete(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_pending_is_active(IntPtr raw);

		public bool IsActive { 
			get {
				bool raw_ret = rc_pending_is_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_pending_get_latest_message(IntPtr raw);

		public string LatestMessage { 
			get {
				IntPtr raw_ret = rc_pending_get_latest_message(Handle);
				string ret = Marshal.PtrToStringAnsi(raw_ret);
				return ret;
			}
		}


		static Pending ()
		{
			GtkSharp.LibredcarpetSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
