// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct DepOr {

		public string OrDep;
		private IntPtr _split_ors;
		private IntPtr _created_provides;
		public int Reference;

		public static RC.DepOr Zero = new RC.DepOr ();

		public static RC.DepOr New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return RC.DepOr.Zero;
			}
			RC.DepOr self = new RC.DepOr();
			self = (RC.DepOr) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_dep_or_new(IntPtr deps);

		public static DepOr New(GLib.SList deps)
		{
			return DepOr.New (rc_dep_or_new(deps.Handle));
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_dep_or_new_by_string(string depstr);

		public static DepOr NewByString(string depstr)
		{
			return DepOr.New (rc_dep_or_new_by_string(depstr));
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_dep_or_new_provide(ref RC.DepOr dor);

		public static DepOr NewProvide(RC.DepOr dor)
		{
			return DepOr.New (rc_dep_or_new_provide(ref dor));
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_dep_or_new_provide_by_string(string dor_name);

		public static DepOr NewProvideByString(string dor_name)
		{
			return DepOr.New (rc_dep_or_new_provide_by_string(dor_name));
		}

		[DllImport("libredcarpet")]
		static extern void rc_dep_or_free(ref RC.DepOr raw);

		public void Free() {
			rc_dep_or_free(ref this);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_dep_or_dep_slist_to_string(IntPtr dep);

		public static string DepSlistToString(GLib.SList dep) {
			IntPtr raw_ret = rc_dep_or_dep_slist_to_string(dep.Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

#endregion
	}
}
