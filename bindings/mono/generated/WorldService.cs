// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class WorldService : RC.WorldStore {

		~WorldService()
		{
			Dispose();
		}

		[Obsolete]
		protected WorldService(GLib.GType gtype) : base(gtype) {}
		public WorldService(IntPtr raw) : base(raw) {}

		protected WorldService() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_service_get_url(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_world_service_set_url(IntPtr raw, IntPtr url);

		public string Url {
			get  {
				IntPtr raw_ret = rc_world_service_get_url(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr url_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				rc_world_service_set_url(Handle, url_as_native);
				GLib.Marshaller.Free (url_as_native);
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_world_service_get_is_sticky(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_world_service_set_is_sticky(IntPtr raw, bool sticky);

		public bool IsSticky {
			get  {
				bool raw_ret = rc_world_service_get_is_sticky(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				rc_world_service_set_is_sticky(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_world_service_get_is_singleton(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_world_service_set_is_singleton(IntPtr raw, bool singleton);

		public bool IsSingleton {
			get  {
				bool raw_ret = rc_world_service_get_is_singleton(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				rc_world_service_set_is_singleton(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern bool rc_world_service_get_is_invisible(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_world_service_set_is_invisible(IntPtr raw, bool invisible);

		public bool IsInvisible {
			get  {
				bool raw_ret = rc_world_service_get_is_invisible(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				rc_world_service_set_is_invisible(Handle, value);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_service_get_name(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_world_service_set_name(IntPtr raw, IntPtr name);

		public string Name {
			get  {
				IntPtr raw_ret = rc_world_service_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr name_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				rc_world_service_set_name(Handle, name_as_native);
				GLib.Marshaller.Free (name_as_native);
			}
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_service_lookup(IntPtr scheme);

		public static GLib.GType Lookup(string scheme) {
			IntPtr scheme_as_native = GLib.Marshaller.StringToPtrGStrdup (scheme);
			IntPtr raw_ret = rc_world_service_lookup(scheme_as_native);
			GLib.GType ret = new GLib.GType(raw_ret);
			GLib.Marshaller.Free (scheme_as_native);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_service_get_id(IntPtr raw);

		[DllImport("libredcarpet")]
		static extern void rc_world_service_set_id(IntPtr raw, IntPtr id);

		public string Id { 
			get {
				IntPtr raw_ret = rc_world_service_get_id(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set {
				IntPtr id_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				rc_world_service_set_id(Handle, id_as_native);
				GLib.Marshaller.Free (id_as_native);
			}
		}

		[DllImport("libredcarpet")]
		static extern void rc_world_service_unregister(IntPtr scheme);

		public static void Unregister(string scheme) {
			IntPtr scheme_as_native = GLib.Marshaller.StringToPtrGStrdup (scheme);
			rc_world_service_unregister(scheme_as_native);
			GLib.Marshaller.Free (scheme_as_native);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_world_service_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = rc_world_service_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static WorldService ()
		{
			GtkSharp.LibredcarpetSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "WorldService.custom"
    private static Hashtable services = new Hashtable();

    [DllImport("libredcarpet")]
    static extern unsafe IntPtr rc_world_service_mount(string url, out IntPtr error);

    private static RC.World MountUnmanaged(string url) {
        IntPtr error = IntPtr.Zero;
        IntPtr raw_ret = rc_world_service_mount(url, out error);
        RC.World ret;
        if (raw_ret == IntPtr.Zero)
            ret = null;
        else
            ret = (RC.World) GLib.Object.GetObject(raw_ret, true);
        if (error != IntPtr.Zero)
            throw new GLib.GException (error);

        return ret;
    }

    private static RC.World MountManaged(string url) {
        Uri uri = new Uri(url);

        Type type = (Type)services[uri.Scheme];

        Type[] argTypes = new Type[1];
        argTypes[0] = typeof(string);
                        
        System.Reflection.ConstructorInfo info = type.GetConstructor(argTypes);

        object[] args = new object[1];
        args[0] = url;
                        
        RC.World world = (RC.World)info.Invoke(args);
        ((RC.WorldService)world).Assemble ();

        return world;
    }
                
    public static unsafe RC.World Mount(string url) {
        RC.World world;
                        
        try {
            world = MountUnmanaged(url);
        } catch (GLib.GException e) {
            try {
                world = MountManaged(url);
            } catch (Exception e2) {
                throw e;
            }
        }

        return world;
    }

    protected virtual void Assemble () {}

    [DllImport("libredcarpet")]
    static extern void rc_world_service_register(string scheme, IntPtr world_type);

    public static void Register(string scheme, GLib.GType world_type) {
        rc_world_service_register(scheme, world_type.Val);
    }

    // Support managed services
    public static void Register(string scheme, Type type) {
        services[scheme] = type;
    }

#endregion
	}
}
