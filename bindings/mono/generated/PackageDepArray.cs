// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RC {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct PackageDepArray {

		private IntPtr _data;
		public RC.PackageDep Data {
			get {
				return _data == IntPtr.Zero ? null : (RC.PackageDep) GLib.Opaque.GetOpaque (_data, typeof (RC.PackageDep), false);
			}
			set {
				_data = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public uint Len;

		public static RC.PackageDepArray Zero = new RC.PackageDepArray ();

		public static RC.PackageDepArray New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return RC.PackageDepArray.Zero;
			}
			RC.PackageDepArray self = new RC.PackageDepArray();
			self = (RC.PackageDepArray) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_array_copy(ref RC.PackageDepArray raw);

		public RC.PackageDepArray Copy() {
			IntPtr raw_ret = rc_package_dep_array_copy(ref this);
			RC.PackageDepArray ret = RC.PackageDepArray.New (raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern void rc_package_dep_array_free(ref RC.PackageDepArray raw);

		public void Free() {
			rc_package_dep_array_free(ref this);
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_array_from_slist(IntPtr list);

		public static RC.PackageDepArray FromSlist(GLib.SList list) {
			IntPtr raw_ret = rc_package_dep_array_from_slist(list.Handle);
			RC.PackageDepArray ret = RC.PackageDepArray.New (raw_ret);
			return ret;
		}

		[DllImport("libredcarpet")]
		static extern IntPtr rc_package_dep_array_to_slist(ref RC.PackageDepArray raw);

		public GLib.SList ToSlist() {
			IntPtr raw_ret = rc_package_dep_array_to_slist(ref this);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
